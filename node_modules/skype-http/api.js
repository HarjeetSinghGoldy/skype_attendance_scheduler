"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const accept_contact_request_1 = require("./api/accept-contact-request");
const add_member_1 = require("./api/add-member");
const create_conversation_1 = require("./api/create-conversation");
const decline_contact_request_1 = require("./api/decline-contact-request");
const get_contact_1 = require("./api/get-contact");
const get_conversation_1 = require("./api/get-conversation");
const get_conversations_1 = require("./api/get-conversations");
const get_join_url_1 = require("./api/get-join-url");
const send_image_1 = require("./api/send-image");
const send_message_1 = require("./api/send-message");
const set_conversation_topic_1 = require("./api/set-conversation-topic");
const set_status_1 = require("./api/set-status");
const contacts_1 = require("./contacts/contacts");
const context_1 = require("./interfaces/api/context");
const messages_poller_1 = require("./polling/messages-poller");
class Api extends events_1.default.EventEmitter {
    constructor(context, io) {
        super();
        this.context = context;
        this.io = io;
        this.messagesPoller = new messages_poller_1.MessagesPoller(this.io, this.context);
        this.messagesPoller.on("error", (err) => this.emit("error", err));
        // tslint:disable-next-line:no-void-expression
        this.messagesPoller.on("event-message", (ev) => this.handlePollingEvent(ev));
        this.contactsService = new contacts_1.ContactsService(this.io);
    }
    async acceptContactRequest(contactUsername) {
        await accept_contact_request_1.acceptContactRequest(this.io, this.context, contactUsername);
        return this;
    }
    async declineContactRequest(contactUsername) {
        await decline_contact_request_1.declineContactRequest(this.io, this.context, contactUsername);
        return this;
    }
    async getContactInvites() {
        return this.contactsService.getInvites(this.context);
    }
    async getContact(contactId) {
        return get_contact_1.getContact(this.io, this.context, contactId);
    }
    async getContacts() {
        return this.contactsService.getContacts(this.context);
    }
    async getConversation(conversationId) {
        return get_conversation_1.getConversation(this.io, this.context, conversationId);
    }
    async getConversations() {
        return get_conversations_1.getConversations(this.io, this.context);
    }
    async sendMessage(message, conversationId) {
        return send_message_1.sendMessage(this.io, this.context, message, conversationId);
    }
    async setConversationTopic(conversationId, topic) {
        return set_conversation_topic_1.setConversationTopic(this.io, this.context, conversationId, topic);
    }
    async getJoinUrl(conversationId) {
        return get_join_url_1.getJoinUrl(this.io, this.context, conversationId);
    }
    async addMemberToConversation(conversationId, memberId) {
        return add_member_1.addMemberToConversation(this.io, this.context, conversationId, memberId);
    }
    async createConversation(allUsers) {
        return create_conversation_1.createConversation(this.io, this.context, allUsers);
    }
    async sendImage(message, conversationId) {
        return send_image_1.sendImage(this.io, this.context, message, conversationId);
    }
    getState() {
        return context_1.Context.toJson(this.context);
    }
    async setStatus(status) {
        return set_status_1.setStatus(this.io, this.context, status);
    }
    /**
     * Start polling and emitting events
     */
    async listen() {
        this.messagesPoller.run();
        return Promise.resolve(this);
    }
    /**
     * Stop polling and emitting events
     */
    async stopListening() {
        this.messagesPoller.stop();
        return Promise.resolve(this);
    }
    handlePollingEvent(ev) {
        this.emit("event", ev);
        if (ev.resource === null) {
            return;
        }
        // Prevent infinite-loop (echo itself)
        if (ev.resource.from.username === this.context.username) {
            return;
        }
        if (ev.resource.type === "Text") {
            this.emit("Text", ev.resource);
        }
        else if (ev.resource.type === "RichText") {
            this.emit("RichText", ev.resource);
        }
    }
}
exports.Api = Api;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

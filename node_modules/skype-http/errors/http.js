"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const util_1 = __importDefault(require("util"));
var UnexpectedHttpStatusError;
(function (UnexpectedHttpStatusError) {
    UnexpectedHttpStatusError.name = "UnexpectedHttpStatus";
})(UnexpectedHttpStatusError = exports.UnexpectedHttpStatusError || (exports.UnexpectedHttpStatusError = {}));
(function (UnexpectedHttpStatusError) {
    function format({ expected, response, request }) {
        const msg = `Received response with the HTTP status code \`${response.statusCode}\``
            + ` but expected one of ${util_1.default.inspect(expected)}.`;
        if (request === undefined) {
            return `${msg} Response: ${util_1.default.inspect(response)}`;
        }
        else {
            return `${msg} Request: ${util_1.default.inspect(request)}, Response: ${util_1.default.inspect(response)}`;
        }
    }
    UnexpectedHttpStatusError.format = format;
    function create(response, expected, request) {
        return new incident_1.Incident(UnexpectedHttpStatusError.name, { response, expected, request }, format);
    }
    UnexpectedHttpStatusError.create = create;
})(UnexpectedHttpStatusError = exports.UnexpectedHttpStatusError || (exports.UnexpectedHttpStatusError = {}));
var MissingHeaderError;
(function (MissingHeaderError) {
    MissingHeaderError.name = "MissingHeader";
})(MissingHeaderError = exports.MissingHeaderError || (exports.MissingHeaderError = {}));
(function (MissingHeaderError) {
    function format({ headerName, response, request }) {
        const msg = `Received response with headers \`${util_1.default.inspect(response.headers)}\``
            + ` where the expected header ${util_1.default.inspect(headerName)} is missing.`;
        if (request === undefined) {
            return `${msg} Response: ${util_1.default.inspect(response)}`;
        }
        else {
            return `${msg} Request: ${util_1.default.inspect(request)}, Response: ${util_1.default.inspect(response)}`;
        }
    }
    MissingHeaderError.format = format;
    function create(response, headerName, request) {
        return new incident_1.Incident(MissingHeaderError.name, { response, headerName, request }, format);
    }
    MissingHeaderError.create = create;
})(MissingHeaderError = exports.MissingHeaderError || (exports.MissingHeaderError = {}));
var RequestError;
(function (RequestError) {
    RequestError.name = "Request";
})(RequestError = exports.RequestError || (exports.RequestError = {}));
(function (RequestError) {
    function format({ request }) {
        return `The following HTTP request failed: "${JSON.stringify(request)}"`;
    }
    RequestError.format = format;
    function create(cause, request) {
        return new incident_1.Incident(cause, RequestError.name, { request }, format);
    }
    RequestError.create = create;
})(RequestError = exports.RequestError || (exports.RequestError = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,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UzVCO0FBVEQsV0FBaUIsWUFBWTtJQUVkLGlCQUFJLEdBQVMsU0FBUyxDQUFDO0FBT3RDLENBQUMsRUFUZ0IsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFTNUI7QUFJRCxXQUFpQixZQUFZO0lBRzNCLGdCQUF1QixFQUFDLE9BQU8sRUFBTztRQUNwQyxNQUFNLENBQUMsdUNBQXVDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUMzRSxDQUFDO0lBRmUsbUJBQU0sU0FFckIsQ0FBQTtJQUVELGdCQUNFLEtBQVksRUFDWixPQUFtRTtRQUVuRSxNQUFNLENBQUMsSUFBSSxtQkFBUSxDQUFDLEtBQUssRUFBRSxhQUFBLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFMZSxtQkFBTSxTQUtyQixDQUFBO0FBQ0gsQ0FBQyxFQWJnQixZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQWE1QiIsImZpbGUiOiJlcnJvcnMvaHR0cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluY2lkZW50IH0gZnJvbSBcImluY2lkZW50XCI7XG5pbXBvcnQgdXRpbCBmcm9tIFwidXRpbFwiO1xuaW1wb3J0ICogYXMgaHR0cElvIGZyb20gXCIuLi9pbnRlcmZhY2VzL2h0dHAtaW9cIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBVbmV4cGVjdGVkSHR0cFN0YXR1c0Vycm9yIHtcbiAgZXhwb3J0IHR5cGUgTmFtZSA9IFwiVW5leHBlY3RlZEh0dHBTdGF0dXNcIjtcbiAgZXhwb3J0IGNvbnN0IG5hbWU6IE5hbWUgPSBcIlVuZXhwZWN0ZWRIdHRwU3RhdHVzXCI7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBEYXRhIHtcbiAgICByZXNwb25zZTogaHR0cElvLlJlc3BvbnNlO1xuICAgIGV4cGVjdGVkOiBTZXQ8bnVtYmVyPjtcbiAgICByZXF1ZXN0PzogaHR0cElvLkdldE9wdGlvbnMgfCBodHRwSW8uUG9zdE9wdGlvbnMgfCBodHRwSW8uUHV0T3B0aW9ucztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIENhdXNlID0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBVbmV4cGVjdGVkSHR0cFN0YXR1c0Vycm9yID0gSW5jaWRlbnQ8VW5leHBlY3RlZEh0dHBTdGF0dXNFcnJvci5EYXRhLFxuICBVbmV4cGVjdGVkSHR0cFN0YXR1c0Vycm9yLk5hbWUsXG4gIFVuZXhwZWN0ZWRIdHRwU3RhdHVzRXJyb3IuQ2F1c2U+O1xuXG5leHBvcnQgbmFtZXNwYWNlIFVuZXhwZWN0ZWRIdHRwU3RhdHVzRXJyb3Ige1xuICBleHBvcnQgdHlwZSBUeXBlID0gVW5leHBlY3RlZEh0dHBTdGF0dXNFcnJvcjtcblxuICBleHBvcnQgZnVuY3Rpb24gZm9ybWF0KHtleHBlY3RlZCwgcmVzcG9uc2UsIHJlcXVlc3R9OiBEYXRhKSB7XG4gICAgY29uc3QgbXNnOiBzdHJpbmcgPSBgUmVjZWl2ZWQgcmVzcG9uc2Ugd2l0aCB0aGUgSFRUUCBzdGF0dXMgY29kZSBcXGAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9XFxgYFxuICAgICAgKyBgIGJ1dCBleHBlY3RlZCBvbmUgb2YgJHt1dGlsLmluc3BlY3QoZXhwZWN0ZWQpfS5gO1xuICAgIGlmIChyZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBgJHttc2d9IFJlc3BvbnNlOiAke3V0aWwuaW5zcGVjdChyZXNwb25zZSl9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke21zZ30gUmVxdWVzdDogJHt1dGlsLmluc3BlY3QocmVxdWVzdCl9LCBSZXNwb25zZTogJHt1dGlsLmluc3BlY3QocmVzcG9uc2UpfWA7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShcbiAgICByZXNwb25zZTogaHR0cElvLlJlc3BvbnNlLFxuICAgIGV4cGVjdGVkOiBTZXQ8bnVtYmVyPixcbiAgICByZXF1ZXN0PzogaHR0cElvLkdldE9wdGlvbnMgfCBodHRwSW8uUG9zdE9wdGlvbnMgfCBodHRwSW8uUHV0T3B0aW9ucyxcbiAgKTogVW5leHBlY3RlZEh0dHBTdGF0dXNFcnJvciB7XG4gICAgcmV0dXJuIG5ldyBJbmNpZGVudChuYW1lLCB7cmVzcG9uc2UsIGV4cGVjdGVkLCByZXF1ZXN0fSwgZm9ybWF0KTtcbiAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIE1pc3NpbmdIZWFkZXJFcnJvciB7XG4gIGV4cG9ydCB0eXBlIE5hbWUgPSBcIk1pc3NpbmdIZWFkZXJcIjtcbiAgZXhwb3J0IGNvbnN0IG5hbWU6IE5hbWUgPSBcIk1pc3NpbmdIZWFkZXJcIjtcblxuICBleHBvcnQgaW50ZXJmYWNlIERhdGEge1xuICAgIHJlc3BvbnNlOiBodHRwSW8uUmVzcG9uc2U7XG4gICAgaGVhZGVyTmFtZTogc3RyaW5nO1xuICAgIHJlcXVlc3Q/OiBodHRwSW8uR2V0T3B0aW9ucyB8IGh0dHBJby5Qb3N0T3B0aW9ucyB8IGh0dHBJby5QdXRPcHRpb25zO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ2F1c2UgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIE1pc3NpbmdIZWFkZXJFcnJvciA9IEluY2lkZW50PE1pc3NpbmdIZWFkZXJFcnJvci5EYXRhLFxuICBNaXNzaW5nSGVhZGVyRXJyb3IuTmFtZSxcbiAgTWlzc2luZ0hlYWRlckVycm9yLkNhdXNlPjtcblxuZXhwb3J0IG5hbWVzcGFjZSBNaXNzaW5nSGVhZGVyRXJyb3Ige1xuICBleHBvcnQgdHlwZSBUeXBlID0gTWlzc2luZ0hlYWRlckVycm9yO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoe2hlYWRlck5hbWUsIHJlc3BvbnNlLCByZXF1ZXN0fTogRGF0YSkge1xuICAgIGNvbnN0IG1zZzogc3RyaW5nID0gYFJlY2VpdmVkIHJlc3BvbnNlIHdpdGggaGVhZGVycyBcXGAke3V0aWwuaW5zcGVjdChyZXNwb25zZS5oZWFkZXJzKX1cXGBgXG4gICAgICArIGAgd2hlcmUgdGhlIGV4cGVjdGVkIGhlYWRlciAke3V0aWwuaW5zcGVjdChoZWFkZXJOYW1lKX0gaXMgbWlzc2luZy5gO1xuICAgIGlmIChyZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBgJHttc2d9IFJlc3BvbnNlOiAke3V0aWwuaW5zcGVjdChyZXNwb25zZSl9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke21zZ30gUmVxdWVzdDogJHt1dGlsLmluc3BlY3QocmVxdWVzdCl9LCBSZXNwb25zZTogJHt1dGlsLmluc3BlY3QocmVzcG9uc2UpfWA7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShcbiAgICByZXNwb25zZTogaHR0cElvLlJlc3BvbnNlLFxuICAgIGhlYWRlck5hbWU6IHN0cmluZyxcbiAgICByZXF1ZXN0PzogaHR0cElvLkdldE9wdGlvbnMgfCBodHRwSW8uUG9zdE9wdGlvbnMgfCBodHRwSW8uUHV0T3B0aW9ucyxcbiAgKTogTWlzc2luZ0hlYWRlckVycm9yIHtcbiAgICByZXR1cm4gbmV3IEluY2lkZW50KG5hbWUsIHtyZXNwb25zZSwgaGVhZGVyTmFtZSwgcmVxdWVzdH0sIGZvcm1hdCk7XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSZXF1ZXN0RXJyb3Ige1xuICBleHBvcnQgdHlwZSBOYW1lID0gXCJSZXF1ZXN0XCI7XG4gIGV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJSZXF1ZXN0XCI7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBEYXRhIHtcbiAgICByZXF1ZXN0OiBodHRwSW8uR2V0T3B0aW9ucyB8IGh0dHBJby5Qb3N0T3B0aW9ucyB8IGh0dHBJby5QdXRPcHRpb25zO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ2F1c2UgPSBFcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVxdWVzdEVycm9yID0gSW5jaWRlbnQ8UmVxdWVzdEVycm9yLkRhdGEsIFJlcXVlc3RFcnJvci5OYW1lLCBSZXF1ZXN0RXJyb3IuQ2F1c2U+O1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlcXVlc3RFcnJvciB7XG4gIGV4cG9ydCB0eXBlIFR5cGUgPSBSZXF1ZXN0RXJyb3I7XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCh7cmVxdWVzdH06IERhdGEpIHtcbiAgICByZXR1cm4gYFRoZSBmb2xsb3dpbmcgSFRUUCByZXF1ZXN0IGZhaWxlZDogXCIke0pTT04uc3RyaW5naWZ5KHJlcXVlc3QpfVwiYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoXG4gICAgY2F1c2U6IEVycm9yLFxuICAgIHJlcXVlc3Q6IGh0dHBJby5HZXRPcHRpb25zIHwgaHR0cElvLlBvc3RPcHRpb25zIHwgaHR0cElvLlB1dE9wdGlvbnMsXG4gICk6IFJlcXVlc3RFcnJvciB7XG4gICAgcmV0dXJuIG5ldyBJbmNpZGVudChjYXVzZSwgbmFtZSwge3JlcXVlc3R9LCBmb3JtYXQpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
var LiveTokenNotFoundError;
(function (LiveTokenNotFoundError) {
    LiveTokenNotFoundError.name = "LiveTokenNotFound";
})(LiveTokenNotFoundError = exports.LiveTokenNotFoundError || (exports.LiveTokenNotFoundError = {}));
(function (LiveTokenNotFoundError) {
    function format({ html }) {
        return "Unable to find the Live token."
            + " This token is normally found in the HTML response as the value of the element with the id \"t\"."
            + " This error may be caused by a change in the Microsoft login workflow."
            + ` HTML page: ${JSON.stringify(html)}`;
    }
    LiveTokenNotFoundError.format = format;
    function create(html) {
        return new incident_1.Incident(LiveTokenNotFoundError.name, { html }, format);
    }
    LiveTokenNotFoundError.create = create;
})(LiveTokenNotFoundError = exports.LiveTokenNotFoundError || (exports.LiveTokenNotFoundError = {}));
var GetLiveTokenError;
(function (GetLiveTokenError) {
    GetLiveTokenError.name = "GetLiveToken";
})(GetLiveTokenError = exports.GetLiveTokenError || (exports.GetLiveTokenError = {}));
(function (GetLiveTokenError) {
    function format() {
        return "Unable to get the Live token for Skype";
    }
    GetLiveTokenError.format = format;
    function create(cause) {
        return incident_1.Incident(cause, GetLiveTokenError.name, {}, format);
    }
    GetLiveTokenError.create = create;
})(GetLiveTokenError = exports.GetLiveTokenError || (exports.GetLiveTokenError = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zcmMvZXJyb3JzL21pY3Jvc29mdC1hY2NvdW50L2dldC1saXZlLXRva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQW9DO0FBR3BDLElBQWlCLHNCQUFzQixDQVN0QztBQVRELFdBQWlCLHNCQUFzQjtJQUV4QiwyQkFBSSxHQUFTLG1CQUFtQixDQUFDO0FBT2hELENBQUMsRUFUZ0Isc0JBQXNCLEdBQXRCLDhCQUFzQixLQUF0Qiw4QkFBc0IsUUFTdEM7QUFNRCxXQUFpQixzQkFBc0I7SUFHckMsZ0JBQXVCLEVBQUMsSUFBSSxFQUFPO1FBQ2pDLE1BQU0sQ0FBQyxnQ0FBZ0M7Y0FDbkMsbUdBQW1HO2NBQ25HLHdFQUF3RTtjQUN4RSxlQUFlLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBTGUsNkJBQU0sU0FLckIsQ0FBQTtJQUVELGdCQUF1QixJQUFZO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLG1CQUFRLENBQUMsdUJBQUEsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUZlLDZCQUFNLFNBRXJCLENBQUE7QUFDSCxDQUFDLEVBYmdCLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBYXRDO0FBRUQsSUFBaUIsaUJBQWlCLENBUWpDO0FBUkQsV0FBaUIsaUJBQWlCO0lBRW5CLHNCQUFJLEdBQVMsY0FBYyxDQUFDO0FBTTNDLENBQUMsRUFSZ0IsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUFRakM7QUFJRCxXQUFpQixpQkFBaUI7SUFHaEM7UUFDRSxNQUFNLENBQUMsd0NBQXdDLENBQUM7SUFDbEQsQ0FBQztJQUZlLHdCQUFNLFNBRXJCLENBQUE7SUFFRCxnQkFBdUIsS0FBWTtRQUNqQyxNQUFNLENBQUMsbUJBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQUEsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRmUsd0JBQU0sU0FFckIsQ0FBQTtBQUNILENBQUMsRUFWZ0IsaUJBQWlCLEdBQWpCLHlCQUFpQixLQUFqQix5QkFBaUIsUUFVakMiLCJmaWxlIjoiZXJyb3JzL21pY3Jvc29mdC1hY2NvdW50L2dldC1saXZlLXRva2VuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5jaWRlbnQgfSBmcm9tIFwiaW5jaWRlbnRcIjtcbmltcG9ydCB7IFJlcXVlc3RFcnJvciB9IGZyb20gXCIuLi9odHRwXCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZVRva2VuTm90Rm91bmRFcnJvciB7XG4gIGV4cG9ydCB0eXBlIE5hbWUgPSBcIkxpdmVUb2tlbk5vdEZvdW5kXCI7XG4gIGV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJMaXZlVG9rZW5Ob3RGb3VuZFwiO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XG4gICAgaHRtbDogc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ2F1c2UgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIExpdmVUb2tlbk5vdEZvdW5kRXJyb3IgPSBJbmNpZGVudDxMaXZlVG9rZW5Ob3RGb3VuZEVycm9yLkRhdGEsXG4gIExpdmVUb2tlbk5vdEZvdW5kRXJyb3IuTmFtZSxcbiAgTGl2ZVRva2VuTm90Rm91bmRFcnJvci5DYXVzZT47XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZVRva2VuTm90Rm91bmRFcnJvciB7XG4gIGV4cG9ydCB0eXBlIFR5cGUgPSBMaXZlVG9rZW5Ob3RGb3VuZEVycm9yO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoe2h0bWx9OiBEYXRhKSB7XG4gICAgcmV0dXJuIFwiVW5hYmxlIHRvIGZpbmQgdGhlIExpdmUgdG9rZW4uXCJcbiAgICAgICsgXCIgVGhpcyB0b2tlbiBpcyBub3JtYWxseSBmb3VuZCBpbiB0aGUgSFRNTCByZXNwb25zZSBhcyB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgaWQgXFxcInRcXFwiLlwiXG4gICAgICArIFwiIFRoaXMgZXJyb3IgbWF5IGJlIGNhdXNlZCBieSBhIGNoYW5nZSBpbiB0aGUgTWljcm9zb2Z0IGxvZ2luIHdvcmtmbG93LlwiXG4gICAgICArIGAgSFRNTCBwYWdlOiAke0pTT04uc3RyaW5naWZ5KGh0bWwpfWA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlKGh0bWw6IHN0cmluZyk6IExpdmVUb2tlbk5vdEZvdW5kRXJyb3Ige1xuICAgIHJldHVybiBuZXcgSW5jaWRlbnQobmFtZSwge2h0bWx9LCBmb3JtYXQpO1xuICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgR2V0TGl2ZVRva2VuRXJyb3Ige1xuICBleHBvcnQgdHlwZSBOYW1lID0gXCJHZXRMaXZlVG9rZW5cIjtcbiAgZXhwb3J0IGNvbnN0IG5hbWU6IE5hbWUgPSBcIkdldExpdmVUb2tlblwiO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XG4gIH1cblxuICBleHBvcnQgdHlwZSBDYXVzZSA9IFJlcXVlc3RFcnJvciB8IExpdmVUb2tlbk5vdEZvdW5kRXJyb3I7XG59XG5cbmV4cG9ydCB0eXBlIEdldExpdmVUb2tlbkVycm9yID0gSW5jaWRlbnQ8R2V0TGl2ZVRva2VuRXJyb3IuRGF0YSwgR2V0TGl2ZVRva2VuRXJyb3IuTmFtZSwgR2V0TGl2ZVRva2VuRXJyb3IuQ2F1c2U+O1xuXG5leHBvcnQgbmFtZXNwYWNlIEdldExpdmVUb2tlbkVycm9yIHtcbiAgZXhwb3J0IHR5cGUgVHlwZSA9IEdldExpdmVUb2tlbkVycm9yO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoKSB7XG4gICAgcmV0dXJuIFwiVW5hYmxlIHRvIGdldCB0aGUgTGl2ZSB0b2tlbiBmb3IgU2t5cGVcIjtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY2F1c2U6IENhdXNlKTogR2V0TGl2ZVRva2VuRXJyb3Ige1xuICAgIHJldHVybiBJbmNpZGVudChjYXVzZSwgbmFtZSwge30sIGZvcm1hdCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==

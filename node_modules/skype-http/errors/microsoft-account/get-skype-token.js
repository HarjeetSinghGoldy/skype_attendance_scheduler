"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
var SkypeTokenNotFoundError;
(function (SkypeTokenNotFoundError) {
    SkypeTokenNotFoundError.name = "SkypeTokenNotFound";
})(SkypeTokenNotFoundError = exports.SkypeTokenNotFoundError || (exports.SkypeTokenNotFoundError = {}));
(function (SkypeTokenNotFoundError) {
    function format({ html }) {
        return "Unable to find the OAuth Skype token. This may be caused by wrong credentials or a change in"
            + " the Microsoft login workflow. You may also have hit a CAPTCHA wall."
            + " This token is normally found in the HTML response as the value of the element `input[name=skypetoken]`."
            + ` HTML page: ${JSON.stringify(html)}`;
    }
    SkypeTokenNotFoundError.format = format;
    function create(html) {
        return new incident_1.Incident(SkypeTokenNotFoundError.name, { html }, format);
    }
    SkypeTokenNotFoundError.create = create;
})(SkypeTokenNotFoundError = exports.SkypeTokenNotFoundError || (exports.SkypeTokenNotFoundError = {}));
var GetSkypeTokenError;
(function (GetSkypeTokenError) {
    GetSkypeTokenError.name = "GetSkypeToken";
})(GetSkypeTokenError = exports.GetSkypeTokenError || (exports.GetSkypeTokenError = {}));
(function (GetSkypeTokenError) {
    function format() {
        return "Unable to get the OAuth Skype token.";
    }
    GetSkypeTokenError.format = format;
    function create(cause) {
        return incident_1.Incident(cause, GetSkypeTokenError.name, {}, format);
    }
    GetSkypeTokenError.create = create;
})(GetSkypeTokenError = exports.GetSkypeTokenError || (exports.GetSkypeTokenError = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zcmMvZXJyb3JzL21pY3Jvc29mdC1hY2NvdW50L2dldC1za3lwZS10b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFvQztBQUdwQyxJQUFpQix1QkFBdUIsQ0FTdkM7QUFURCxXQUFpQix1QkFBdUI7SUFFekIsNEJBQUksR0FBUyxvQkFBb0IsQ0FBQztBQU9qRCxDQUFDLEVBVGdCLHVCQUF1QixHQUF2QiwrQkFBdUIsS0FBdkIsK0JBQXVCLFFBU3ZDO0FBTUQsV0FBaUIsdUJBQXVCO0lBR3RDLGdCQUF1QixFQUFDLElBQUksRUFBTztRQUNqQyxNQUFNLENBQUMsOEZBQThGO2NBQ2pHLHNFQUFzRTtjQUN0RSwwR0FBMEc7Y0FDMUcsZUFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUxlLDhCQUFNLFNBS3JCLENBQUE7SUFFRCxnQkFBdUIsSUFBWTtRQUNqQyxNQUFNLENBQUMsSUFBSSxtQkFBUSxDQUFDLHdCQUFBLElBQUksRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFGZSw4QkFBTSxTQUVyQixDQUFBO0FBQ0gsQ0FBQyxFQWJnQix1QkFBdUIsR0FBdkIsK0JBQXVCLEtBQXZCLCtCQUF1QixRQWF2QztBQUVELElBQWlCLGtCQUFrQixDQVFsQztBQVJELFdBQWlCLGtCQUFrQjtJQUVwQix1QkFBSSxHQUFTLGVBQWUsQ0FBQztBQU01QyxDQUFDLEVBUmdCLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBUWxDO0FBSUQsV0FBaUIsa0JBQWtCO0lBR2pDO1FBQ0UsTUFBTSxDQUFDLHNDQUFzQyxDQUFDO0lBQ2hELENBQUM7SUFGZSx5QkFBTSxTQUVyQixDQUFBO0lBRUQsZ0JBQXVCLEtBQVk7UUFDakMsTUFBTSxDQUFDLG1CQUFRLENBQUMsS0FBSyxFQUFFLG1CQUFBLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUZlLHlCQUFNLFNBRXJCLENBQUE7QUFDSCxDQUFDLEVBVmdCLGtCQUFrQixHQUFsQiwwQkFBa0IsS0FBbEIsMEJBQWtCLFFBVWxDIiwiZmlsZSI6ImVycm9ycy9taWNyb3NvZnQtYWNjb3VudC9nZXQtc2t5cGUtdG9rZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmNpZGVudCB9IGZyb20gXCJpbmNpZGVudFwiO1xuaW1wb3J0IHsgUmVxdWVzdEVycm9yIH0gZnJvbSBcIi4uL2h0dHBcIjtcblxuZXhwb3J0IG5hbWVzcGFjZSBTa3lwZVRva2VuTm90Rm91bmRFcnJvciB7XG4gIGV4cG9ydCB0eXBlIE5hbWUgPSBcIlNreXBlVG9rZW5Ob3RGb3VuZFwiO1xuICBleHBvcnQgY29uc3QgbmFtZTogTmFtZSA9IFwiU2t5cGVUb2tlbk5vdEZvdW5kXCI7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBEYXRhIHtcbiAgICBodG1sOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBDYXVzZSA9IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHR5cGUgU2t5cGVUb2tlbk5vdEZvdW5kRXJyb3IgPSBJbmNpZGVudDxTa3lwZVRva2VuTm90Rm91bmRFcnJvci5EYXRhLFxuICBTa3lwZVRva2VuTm90Rm91bmRFcnJvci5OYW1lLFxuICBTa3lwZVRva2VuTm90Rm91bmRFcnJvci5DYXVzZT47XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2t5cGVUb2tlbk5vdEZvdW5kRXJyb3Ige1xuICBleHBvcnQgdHlwZSBUeXBlID0gU2t5cGVUb2tlbk5vdEZvdW5kRXJyb3I7XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCh7aHRtbH06IERhdGEpIHtcbiAgICByZXR1cm4gXCJVbmFibGUgdG8gZmluZCB0aGUgT0F1dGggU2t5cGUgdG9rZW4uIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB3cm9uZyBjcmVkZW50aWFscyBvciBhIGNoYW5nZSBpblwiXG4gICAgICArIFwiIHRoZSBNaWNyb3NvZnQgbG9naW4gd29ya2Zsb3cuIFlvdSBtYXkgYWxzbyBoYXZlIGhpdCBhIENBUFRDSEEgd2FsbC5cIlxuICAgICAgKyBcIiBUaGlzIHRva2VuIGlzIG5vcm1hbGx5IGZvdW5kIGluIHRoZSBIVE1MIHJlc3BvbnNlIGFzIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBgaW5wdXRbbmFtZT1za3lwZXRva2VuXWAuXCJcbiAgICAgICsgYCBIVE1MIHBhZ2U6ICR7SlNPTi5zdHJpbmdpZnkoaHRtbCl9YDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoaHRtbDogc3RyaW5nKTogU2t5cGVUb2tlbk5vdEZvdW5kRXJyb3Ige1xuICAgIHJldHVybiBuZXcgSW5jaWRlbnQobmFtZSwge2h0bWx9LCBmb3JtYXQpO1xuICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgR2V0U2t5cGVUb2tlbkVycm9yIHtcbiAgZXhwb3J0IHR5cGUgTmFtZSA9IFwiR2V0U2t5cGVUb2tlblwiO1xuICBleHBvcnQgY29uc3QgbmFtZTogTmFtZSA9IFwiR2V0U2t5cGVUb2tlblwiO1xuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XG4gIH1cblxuICBleHBvcnQgdHlwZSBDYXVzZSA9IFJlcXVlc3RFcnJvciB8IFNreXBlVG9rZW5Ob3RGb3VuZEVycm9yO1xufVxuXG5leHBvcnQgdHlwZSBHZXRTa3lwZVRva2VuRXJyb3IgPSBJbmNpZGVudDxHZXRTa3lwZVRva2VuRXJyb3IuRGF0YSwgR2V0U2t5cGVUb2tlbkVycm9yLk5hbWUsIEdldFNreXBlVG9rZW5FcnJvci5DYXVzZT47XG5cbmV4cG9ydCBuYW1lc3BhY2UgR2V0U2t5cGVUb2tlbkVycm9yIHtcbiAgZXhwb3J0IHR5cGUgVHlwZSA9IEdldFNreXBlVG9rZW5FcnJvcjtcblxuICBleHBvcnQgZnVuY3Rpb24gZm9ybWF0KCkge1xuICAgIHJldHVybiBcIlVuYWJsZSB0byBnZXQgdGhlIE9BdXRoIFNreXBlIHRva2VuLlwiO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShjYXVzZTogQ2F1c2UpOiBHZXRTa3lwZVRva2VuRXJyb3Ige1xuICAgIHJldHVybiBJbmNpZGVudChjYXVzZSwgbmFtZSwge30sIGZvcm1hdCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
var CaseStyle;
(function (CaseStyle) {
    CaseStyle[CaseStyle["CamelCase"] = 0] = "CamelCase";
    CaseStyle[CaseStyle["PascalCase"] = 1] = "PascalCase";
    CaseStyle[CaseStyle["SnakeCase"] = 2] = "SnakeCase";
    CaseStyle[CaseStyle["ScreamingSnakeCase"] = 3] = "ScreamingSnakeCase";
    CaseStyle[CaseStyle["KebabCase"] = 4] = "KebabCase";
})(CaseStyle = exports.CaseStyle || (exports.CaseStyle = {}));
function detectCaseStyle(identifier) {
    if (/^[A-Z]+[0-9]*(?:_[A-Z]+[0-9]*)*$/.test(identifier)) {
        return CaseStyle.ScreamingSnakeCase;
    }
    else if (/^[a-z]+[0-9]*(?:_[a-z]+[0-9]*)+$/.test(identifier)) {
        return CaseStyle.SnakeCase;
    }
    else if (/^[a-z]+[0-9]*(?:-[a-z]+[0-9]*)+$/.test(identifier)) {
        return CaseStyle.KebabCase;
    }
    else if (/^[A-Z]/.test(identifier)) {
        return CaseStyle.PascalCase;
    }
    else {
        return CaseStyle.CamelCase;
    }
}
exports.detectCaseStyle = detectCaseStyle;
function split(caseStyle, identifier) {
    switch (caseStyle) {
        case CaseStyle.ScreamingSnakeCase:
            return identifier.toLowerCase().split("_");
        case CaseStyle.SnakeCase:
            return identifier.toLowerCase().split("_");
        case CaseStyle.KebabCase:
            return identifier.toLowerCase().split("-");
        case CaseStyle.CamelCase:
            return identifier.split(/(?=[A-Z])/).map((part) => part.toLowerCase());
        case CaseStyle.PascalCase:
            return identifier.split(/(?=[A-Z])/).map((part) => part.toLowerCase());
        default:
            throw new incident_1.Incident(`IncompleteSwitch: Received unexpected variant for caseStyle: ${caseStyle}`);
    }
}
exports.split = split;
function join(caseStyle, parts) {
    switch (caseStyle) {
        case CaseStyle.ScreamingSnakeCase:
            return parts.join("_").toUpperCase();
        case CaseStyle.SnakeCase:
            return parts.join("_").toLowerCase();
        case CaseStyle.KebabCase:
            return parts.join("-").toLowerCase();
        case CaseStyle.CamelCase:
            return parts.map((part, index) => {
                const upperLength = index === 0 ? 0 : 1;
                return part.substr(0, upperLength).toUpperCase() + part.substring(upperLength).toLowerCase();
            }).join("");
        case CaseStyle.PascalCase:
            return parts.map((part) => {
                return part.substr(0, 1).toUpperCase() + part.substring(1).toLowerCase();
            }).join("");
        default:
            throw new incident_1.Incident(`IncompleteSwitch: Received unexpected variant for caseStyle: ${caseStyle}`);
    }
}
exports.join = join;
function rename(identifier, from, to) {
    if (to === undefined) {
        to = from;
        from = detectCaseStyle(identifier);
    }
    return join(to, split(from, identifier));
}
exports.rename = rename;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUksQ0FBQztRQUNWLElBQUksR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBTkQsd0JBTUMiLCJmaWxlIjoiY2FzZS1zdHlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluY2lkZW50IH0gZnJvbSBcImluY2lkZW50XCI7XG5cbmV4cG9ydCBlbnVtIENhc2VTdHlsZSB7XG4gIENhbWVsQ2FzZSxcbiAgUGFzY2FsQ2FzZSxcbiAgU25ha2VDYXNlLFxuICBTY3JlYW1pbmdTbmFrZUNhc2UsXG4gIEtlYmFiQ2FzZSxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdENhc2VTdHlsZShpZGVudGlmaWVyOiBzdHJpbmcpOiBDYXNlU3R5bGUge1xuICBpZiAoL15bQS1aXStbMC05XSooPzpfW0EtWl0rWzAtOV0qKSokLy50ZXN0KGlkZW50aWZpZXIpKSB7XG4gICAgcmV0dXJuIENhc2VTdHlsZS5TY3JlYW1pbmdTbmFrZUNhc2U7XG4gIH0gZWxzZSBpZiAoL15bYS16XStbMC05XSooPzpfW2Etel0rWzAtOV0qKSskLy50ZXN0KGlkZW50aWZpZXIpKSB7XG4gICAgcmV0dXJuIENhc2VTdHlsZS5TbmFrZUNhc2U7XG4gIH0gZWxzZSBpZiAoL15bYS16XStbMC05XSooPzotW2Etel0rWzAtOV0qKSskLy50ZXN0KGlkZW50aWZpZXIpKSB7XG4gICAgcmV0dXJuIENhc2VTdHlsZS5LZWJhYkNhc2U7XG4gIH0gZWxzZSBpZiAoL15bQS1aXS8udGVzdChpZGVudGlmaWVyKSkge1xuICAgIHJldHVybiBDYXNlU3R5bGUuUGFzY2FsQ2FzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FzZVN0eWxlLkNhbWVsQ2FzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQoY2FzZVN0eWxlOiBDYXNlU3R5bGUsIGlkZW50aWZpZXI6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgc3dpdGNoIChjYXNlU3R5bGUpIHtcbiAgICBjYXNlIENhc2VTdHlsZS5TY3JlYW1pbmdTbmFrZUNhc2U6XG4gICAgICByZXR1cm4gaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiX1wiKTtcbiAgICBjYXNlIENhc2VTdHlsZS5TbmFrZUNhc2U6XG4gICAgICByZXR1cm4gaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiX1wiKTtcbiAgICBjYXNlIENhc2VTdHlsZS5LZWJhYkNhc2U6XG4gICAgICByZXR1cm4gaWRlbnRpZmllci50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiLVwiKTtcbiAgICBjYXNlIENhc2VTdHlsZS5DYW1lbENhc2U6XG4gICAgICByZXR1cm4gaWRlbnRpZmllci5zcGxpdCgvKD89W0EtWl0pLykubWFwKChwYXJ0OiBzdHJpbmcpOiBzdHJpbmcgPT4gcGFydC50b0xvd2VyQ2FzZSgpKTtcbiAgICBjYXNlIENhc2VTdHlsZS5QYXNjYWxDYXNlOlxuICAgICAgcmV0dXJuIGlkZW50aWZpZXIuc3BsaXQoLyg/PVtBLVpdKS8pLm1hcCgocGFydDogc3RyaW5nKTogc3RyaW5nID0+IHBhcnQudG9Mb3dlckNhc2UoKSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBJbmNpZGVudChgSW5jb21wbGV0ZVN3aXRjaDogUmVjZWl2ZWQgdW5leHBlY3RlZCB2YXJpYW50IGZvciBjYXNlU3R5bGU6ICR7Y2FzZVN0eWxlfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luKGNhc2VTdHlsZTogQ2FzZVN0eWxlLCBwYXJ0czogc3RyaW5nW10pOiBzdHJpbmcge1xuICBzd2l0Y2ggKGNhc2VTdHlsZSkge1xuICAgIGNhc2UgQ2FzZVN0eWxlLlNjcmVhbWluZ1NuYWtlQ2FzZTpcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiX1wiKS50b1VwcGVyQ2FzZSgpO1xuICAgIGNhc2UgQ2FzZVN0eWxlLlNuYWtlQ2FzZTpcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiX1wiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNhc2UgQ2FzZVN0eWxlLktlYmFiQ2FzZTpcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiLVwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNhc2UgQ2FzZVN0eWxlLkNhbWVsQ2FzZTpcbiAgICAgIHJldHVybiBwYXJ0cy5tYXAoKHBhcnQ6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gICAgICAgIGNvbnN0IHVwcGVyTGVuZ3RoOiBudW1iZXIgPSBpbmRleCA9PT0gMCA/IDAgOiAxO1xuICAgICAgICByZXR1cm4gcGFydC5zdWJzdHIoMCwgdXBwZXJMZW5ndGgpLnRvVXBwZXJDYXNlKCkgKyBwYXJ0LnN1YnN0cmluZyh1cHBlckxlbmd0aCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgY2FzZSBDYXNlU3R5bGUuUGFzY2FsQ2FzZTpcbiAgICAgIHJldHVybiBwYXJ0cy5tYXAoKHBhcnQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICAgIHJldHVybiBwYXJ0LnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgcGFydC5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBJbmNpZGVudChgSW5jb21wbGV0ZVN3aXRjaDogUmVjZWl2ZWQgdW5leHBlY3RlZCB2YXJpYW50IGZvciBjYXNlU3R5bGU6ICR7Y2FzZVN0eWxlfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5hbWUoaWRlbnRpZmllcjogc3RyaW5nLCB0bzogQ2FzZVN0eWxlKTogc3RyaW5nO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnVuaWZpZWQtc2lnbmF0dXJlc1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZShpZGVudGlmaWVyOiBzdHJpbmcsIGZyb206IENhc2VTdHlsZSwgdG86IENhc2VTdHlsZSk6IHN0cmluZztcbmV4cG9ydCBmdW5jdGlvbiByZW5hbWUoaWRlbnRpZmllcjogc3RyaW5nLCBmcm9tOiBDYXNlU3R5bGUsIHRvPzogQ2FzZVN0eWxlKTogc3RyaW5nIHtcbiAgaWYgKHRvID09PSB1bmRlZmluZWQpIHtcbiAgICB0byA9IGZyb207XG4gICAgZnJvbSA9IGRldGVjdENhc2VTdHlsZShpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gam9pbih0bywgc3BsaXQoZnJvbSwgaWRlbnRpZmllcikpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

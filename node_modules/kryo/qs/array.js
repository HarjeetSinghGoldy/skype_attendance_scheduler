"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_array_items_1 = require("../errors/invalid-array-items");
const invalid_type_1 = require("../errors/invalid-type");
const max_array_length_1 = require("../errors/max-array-length");
const array_1 = require("../types/array");
function register(serializer) {
    function write(type, val) {
        return val.map((item) => serializer.write(type.itemType, item));
    }
    function read(type, input) {
        if (input === undefined) {
            return [];
        }
        if (!Array.isArray(input)) {
            throw invalid_type_1.createInvalidTypeError("array | undefined", input);
        }
        if (type.maxLength !== undefined && input.length > type.maxLength) {
            throw max_array_length_1.createMaxArrayLengthError(input, type.maxLength);
        }
        let invalid = undefined;
        const result = [];
        const itemCount = input.length;
        for (let i = 0; i < itemCount; i++) {
            try {
                const item = serializer.read(type.itemType, input[i]);
                if (invalid === undefined) {
                    result.push(item);
                }
            }
            catch (err) {
                if (invalid === undefined) {
                    invalid = new Map();
                }
                invalid.set(i, err);
            }
        }
        if (invalid !== undefined) {
            throw invalid_array_items_1.createInvalidArrayItemsError(invalid);
        }
        return result;
    }
    function readTrusted(type, input) {
        if (Array.isArray(input)) {
            return input.map((item) => serializer.readTrusted(type.itemType, item));
        }
        else {
            return [];
        }
    }
    serializer.register({
        typeName: array_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LFlBQVE7UUFDUixLQUFLO1FBQ0wsSUFBSTtRQUNKLFdBQVc7S0FDWixDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkRELDRCQW1EQyIsImZpbGUiOiJxcy9hcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUludmFsaWRBcnJheUl0ZW1zRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtYXJyYXktaXRlbXNcIjtcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtdHlwZVwiO1xuaW1wb3J0IHsgY3JlYXRlTWF4QXJyYXlMZW5ndGhFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbWF4LWFycmF5LWxlbmd0aFwiO1xuaW1wb3J0IHsgU2VyaWFsaXplciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgQXJyYXlUeXBlLCBuYW1lIGFzIHR5cGVOYW1lIH0gZnJvbSBcIi4uL3R5cGVzL2FycmF5XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihzZXJpYWxpemVyOiBTZXJpYWxpemVyKTogdm9pZCB7XG4gIGZ1bmN0aW9uIHdyaXRlPFQ+KHR5cGU6IEFycmF5VHlwZTxUPiwgdmFsOiBUW10pOiBhbnlbXSB7XG4gICAgcmV0dXJuIHZhbC5tYXAoKGl0ZW06IFQpOiBhbnkgPT4gc2VyaWFsaXplci53cml0ZSh0eXBlLml0ZW1UeXBlLCBpdGVtKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkPFQ+KHR5cGU6IEFycmF5VHlwZTxUPiwgaW5wdXQ6IGFueVtdIHwgdW5kZWZpbmVkKTogVFtdIHtcbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwiYXJyYXkgfCB1bmRlZmluZWRcIiwgaW5wdXQpO1xuICAgIH1cbiAgICBpZiAodHlwZS5tYXhMZW5ndGggIT09IHVuZGVmaW5lZCAmJiBpbnB1dC5sZW5ndGggPiB0eXBlLm1heExlbmd0aCkge1xuICAgICAgdGhyb3cgY3JlYXRlTWF4QXJyYXlMZW5ndGhFcnJvcihpbnB1dCwgdHlwZS5tYXhMZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgaW52YWxpZDogdW5kZWZpbmVkIHwgTWFwPG51bWJlciwgRXJyb3I+ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHJlc3VsdDogVFtdID0gW107XG4gICAgY29uc3QgaXRlbUNvdW50OiBudW1iZXIgPSBpbnB1dC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGl0ZW1Db3VudDsgaSsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpdGVtOiBUID0gc2VyaWFsaXplci5yZWFkKHR5cGUuaXRlbVR5cGUsIGlucHV0W2ldKTtcbiAgICAgICAgaWYgKGludmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGludmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGludmFsaWQgPSBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaW52YWxpZC5zZXQoaSwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGludmFsaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY3JlYXRlSW52YWxpZEFycmF5SXRlbXNFcnJvcihpbnZhbGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRUcnVzdGVkPFQ+KHR5cGU6IEFycmF5VHlwZTxUPiwgaW5wdXQ6IGFueVtdIHwgdW5kZWZpbmVkKTogVFtdIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dC5tYXAoKGl0ZW06IGFueSk6IFQgPT4gc2VyaWFsaXplci5yZWFkVHJ1c3RlZCh0eXBlLml0ZW1UeXBlLCBpdGVtKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBzZXJpYWxpemVyLnJlZ2lzdGVyKHtcbiAgICB0eXBlTmFtZSxcbiAgICB3cml0ZSxcbiAgICByZWFkLFxuICAgIHJlYWRUcnVzdGVkLFxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==

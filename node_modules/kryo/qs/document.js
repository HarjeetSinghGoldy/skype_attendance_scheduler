"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_document_1 = require("../errors/invalid-document");
const document_1 = require("../types/document");
function register(serializer) {
    function write(type, val) {
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            const descriptor = type.properties[key];
            const value = val[key];
            if (value === undefined) {
                Reflect.set(result, outKey, undefined);
            }
            else {
                Reflect.set(result, outKey, serializer.write(descriptor.type, value));
            }
        }
        return result;
    }
    function read(type, input) {
        const extra = type.ignoreExtraKeys ? undefined : new Set(Object.keys(input));
        const missing = new Set();
        const invalid = new Map();
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            if (extra !== undefined) {
                extra.delete(outKey);
            }
            const descriptor = type.properties[key];
            const outValue = Reflect.get(input, outKey);
            if (outValue === undefined) {
                if (descriptor.optional) {
                    result[key] = undefined;
                }
                else {
                    missing.add(key);
                }
                continue;
            }
            try {
                result[key] = serializer.read(descriptor.type, outValue);
            }
            catch (err) {
                invalid.set(key, err);
            }
        }
        if (extra !== undefined && extra.size > 0 || missing.size > 0 || invalid.size > 0) {
            throw invalid_document_1.createInvalidDocumentError({ extra, missing, invalid });
        }
        return result;
    }
    function readTrusted(type, input) {
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            const descriptor = type.properties[key];
            const outValue = Reflect.get(input, outKey);
            if (outValue === undefined) {
                result[key] = undefined;
            }
            else {
                result[key] = serializer.readTrusted(descriptor.type, outValue);
            }
        }
        return result;
    }
    serializer.register({
        typeName: document_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVIsZUFBUTtRQUNSLEtBQUs7UUFDTCxJQUFJO1FBQ0osV0FBVztLQUNaLENBQUMsQ0FBQztBQUNMLENBQUM7QUFyRUQsNEJBcUVDIiwiZmlsZSI6InFzL2RvY3VtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW52YWxpZERvY3VtZW50RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtZG9jdW1lbnRcIjtcbmltcG9ydCB7IFNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IERvY3VtZW50VHlwZSwgbmFtZSBhcyB0eXBlTmFtZSwgUHJvcGVydHlEZXNjcmlwdG9yLCByZW5hbWVLZXlzIH0gZnJvbSBcIi4uL3R5cGVzL2RvY3VtZW50XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihzZXJpYWxpemVyOiBTZXJpYWxpemVyKTogdm9pZCB7XG4gIGZ1bmN0aW9uIHdyaXRlPFQgZXh0ZW5kcyB7fT4odHlwZTogRG9jdW1lbnRUeXBlPFQ+LCB2YWw6IFQpOiBhbnkge1xuICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge307IC8vIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBba2V5LCBvdXRLZXldIG9mIHJlbmFtZUtleXModHlwZS5wcm9wZXJ0aWVzLCB0eXBlLnJlbmFtZSkpIHtcbiAgICAgIGNvbnN0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcjxUW2tleW9mIFRdPiA9IHR5cGUucHJvcGVydGllc1trZXldO1xuICAgICAgY29uc3QgdmFsdWU6IFRba2V5b2YgVF0gPSB2YWxba2V5XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIFJlZmxlY3Quc2V0KHJlc3VsdCwgb3V0S2V5LCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVmbGVjdC5zZXQocmVzdWx0LCBvdXRLZXksIHNlcmlhbGl6ZXIud3JpdGUoZGVzY3JpcHRvci50eXBlLCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkPFQgZXh0ZW5kcyB7fT4odHlwZTogRG9jdW1lbnRUeXBlPFQ+LCBpbnB1dDogYW55KTogVCB7XG4gICAgY29uc3QgZXh0cmE6IFNldDxzdHJpbmc+IHwgdW5kZWZpbmVkID0gdHlwZS5pZ25vcmVFeHRyYUtleXMgPyB1bmRlZmluZWQgOiBuZXcgU2V0KE9iamVjdC5rZXlzKGlucHV0KSk7XG4gICAgY29uc3QgbWlzc2luZzogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgaW52YWxpZDogTWFwPGtleW9mIFQsIEVycm9yPiA9IG5ldyBNYXAoKTtcblxuICAgIGNvbnN0IHJlc3VsdDogUGFydGlhbDxUPiA9IHt9OyAvLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCBvdXRLZXldIG9mIHJlbmFtZUtleXModHlwZS5wcm9wZXJ0aWVzLCB0eXBlLnJlbmFtZSkpIHtcbiAgICAgIGlmIChleHRyYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV4dHJhLmRlbGV0ZShvdXRLZXkpO1xuICAgICAgfVxuICAgICAgY29uc3QgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yPGFueT4gPSB0eXBlLnByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IG91dFZhbHVlOiBhbnkgPSBSZWZsZWN0LmdldChpbnB1dCwgb3V0S2V5KTtcbiAgICAgIGlmIChvdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yLm9wdGlvbmFsKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWlzc2luZy5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gc2VyaWFsaXplci5yZWFkKGRlc2NyaXB0b3IudHlwZSwgb3V0VmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGludmFsaWQuc2V0KGtleSwgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0cmEgIT09IHVuZGVmaW5lZCAmJiBleHRyYS5zaXplID4gMCB8fCBtaXNzaW5nLnNpemUgPiAwIHx8IGludmFsaWQuc2l6ZSA+IDApIHtcbiAgICAgIHRocm93IGNyZWF0ZUludmFsaWREb2N1bWVudEVycm9yKHtleHRyYSwgbWlzc2luZywgaW52YWxpZH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVHJ1c3RlZDxUIGV4dGVuZHMge30+KHR5cGU6IERvY3VtZW50VHlwZTxUPiwgaW5wdXQ6IGFueSk6IFQge1xuICAgIGNvbnN0IHJlc3VsdDogUGFydGlhbDxUPiA9IHt9OyAvLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgW2tleSwgb3V0S2V5XSBvZiByZW5hbWVLZXlzKHR5cGUucHJvcGVydGllcywgdHlwZS5yZW5hbWUpKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiA9IHR5cGUucHJvcGVydGllc1trZXldO1xuICAgICAgY29uc3Qgb3V0VmFsdWU6IGFueSA9IFJlZmxlY3QuZ2V0KGlucHV0LCBvdXRLZXkpO1xuICAgICAgaWYgKG91dFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRba2V5XSA9IHNlcmlhbGl6ZXIucmVhZFRydXN0ZWQoZGVzY3JpcHRvci50eXBlLCBvdXRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgfVxuXG4gIHNlcmlhbGl6ZXIucmVnaXN0ZXIoe1xuICAgIHR5cGVOYW1lLFxuICAgIHdyaXRlLFxuICAgIHJlYWQsXG4gICAgcmVhZFRydXN0ZWQsXG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9

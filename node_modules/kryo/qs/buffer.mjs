import { createInvalidTypeError } from "../errors/invalid-type";
import { name as typeName } from "../types/buffer";
function write(type, val) {
    const result = new Array(val.length);
    const len = val.length;
    for (let i = 0; i < len; i++) {
        result[i] = (val[i] < 16 ? "0" : "") + val[i].toString(16);
    }
    return result.join("");
}
function read(type, input) {
    let result;
    if (typeof input !== "string") {
        throw createInvalidTypeError("string", input);
    }
    else if (!/^(?:[0-9a-f]{2})*$/.test(input)) {
        throw createInvalidTypeError("lowerCaseHexEvenLengthString", input);
    }
    const len = input.length / 2;
    result = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        result[i] = parseInt(input.substr(2 * i, 2), 16);
    }
    const error = type.testError(result);
    if (error !== undefined) {
        throw error;
    }
    return result;
}
export function readTrusted(type, input) {
    const len = input.length / 2;
    const result = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        result[i] = parseInt(input.substr(2 * i, 2), 16);
    }
    return result;
}
export const SERIALIZER = {
    typeName,
    write,
    read,
    readTrusted,
};
export function register(serializer) {
    serializer.register(SERIALIZER);
}

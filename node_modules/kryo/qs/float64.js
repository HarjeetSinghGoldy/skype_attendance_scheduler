"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_float64_1 = require("../errors/invalid-float64");
const invalid_type_1 = require("../errors/invalid-type");
const float64_1 = require("../types/float64");
function write(type, value) {
    if (isNaN(value)) {
        return "NaN";
    }
    else if (value === Infinity) {
        return "+Infinity";
    }
    else if (value === -Infinity) {
        return "-Infinity";
    }
    return value.toString(10);
}
function read(type, input) {
    if (typeof input !== "string") {
        throw invalid_type_1.createInvalidTypeError("string", input);
    }
    switch (input) {
        case "NaN":
            if (!type.allowNaN) {
                throw invalid_float64_1.createInvalidFloat64Error(input);
            }
            return NaN;
        case "+Infinity":
            if (!type.allowInfinity) {
                throw invalid_float64_1.createInvalidFloat64Error(input);
            }
            return Infinity;
        case "-Infinity":
            if (!type.allowInfinity) {
                throw invalid_float64_1.createInvalidFloat64Error(input);
            }
            return -Infinity;
        default:
            const val = parseFloat(input);
            const error = type.testError(val);
            if (error !== undefined) {
                throw error;
            }
            return val;
    }
}
function readTrusted(type, input) {
    switch (input) {
        case "NaN":
            return NaN;
        case "+Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            return parseFloat(input);
    }
}
exports.SERIALIZER = {
    typeName: float64_1.name,
    write,
    read,
    readTrusted,
};
function register(serializer) {
    serializer.register(exports.SERIALIZER);
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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b250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUludmFsaWRGbG9hdDY0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtZmxvYXQ2NFwiO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBTZXJpYWxpemVyLCBUeXBlU2VyaWFsaXplciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgRmxvYXQ2NFR5cGUsIG5hbWUgYXMgdHlwZU5hbWUgfSBmcm9tIFwiLi4vdHlwZXMvZmxvYXQ2NFwiO1xuXG5mdW5jdGlvbiB3cml0ZSh0eXBlOiBGbG9hdDY0VHlwZSwgdmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICByZXR1cm4gXCJOYU5cIjtcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gXCIrSW5maW5pdHlcIjtcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gLUluZmluaXR5KSB7XG4gICAgcmV0dXJuIFwiLUluZmluaXR5XCI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKDEwKTtcbn1cblxuZnVuY3Rpb24gcmVhZCh0eXBlOiBGbG9hdDY0VHlwZSwgaW5wdXQ6IHN0cmluZyk6IG51bWJlciB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwic3RyaW5nXCIsIGlucHV0KTtcbiAgfVxuICBzd2l0Y2ggKGlucHV0KSB7XG4gICAgY2FzZSBcIk5hTlwiOlxuICAgICAgaWYgKCF0eXBlLmFsbG93TmFOKSB7XG4gICAgICAgIHRocm93IGNyZWF0ZUludmFsaWRGbG9hdDY0RXJyb3IoaW5wdXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5hTjtcbiAgICBjYXNlIFwiK0luZmluaXR5XCI6XG4gICAgICBpZiAoIXR5cGUuYWxsb3dJbmZpbml0eSkge1xuICAgICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkRmxvYXQ2NEVycm9yKGlucHV0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICBjYXNlIFwiLUluZmluaXR5XCI6XG4gICAgICBpZiAoIXR5cGUuYWxsb3dJbmZpbml0eSkge1xuICAgICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkRmxvYXQ2NEVycm9yKGlucHV0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvbnN0IHZhbDogbnVtYmVyID0gcGFyc2VGbG9hdChpbnB1dCk7XG4gICAgICBjb25zdCBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQgPSB0eXBlLnRlc3RFcnJvcih2YWwpO1xuICAgICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRUcnVzdGVkKHR5cGU6IEZsb2F0NjRUeXBlLCBpbnB1dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgc3dpdGNoIChpbnB1dCkge1xuICAgIGNhc2UgXCJOYU5cIjpcbiAgICAgIHJldHVybiBOYU47XG4gICAgY2FzZSBcIitJbmZpbml0eVwiOlxuICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgIGNhc2UgXCItSW5maW5pdHlcIjpcbiAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGlucHV0KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU0VSSUFMSVpFUjogVHlwZVNlcmlhbGl6ZXI8YW55PiA9IHtcbiAgdHlwZU5hbWUsXG4gIHdyaXRlLFxuICByZWFkLFxuICByZWFkVHJ1c3RlZCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihzZXJpYWxpemVyOiBTZXJpYWxpemVyKTogdm9pZCB7XG4gIHNlcmlhbGl6ZXIucmVnaXN0ZXIoU0VSSUFMSVpFUik7XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

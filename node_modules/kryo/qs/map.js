"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_type_1 = require("../errors/invalid-type");
const map_1 = require("../types/map");
function register(serializer) {
    function write(type, val) {
        const result = {};
        for (const [key, value] of val) {
            const rawKey = type.keyType.writeJson(key);
            const keyString = JSON.stringify(rawKey);
            // TODO(demurgos): Check for duplicate keys
            result[keyString] = serializer.write(type.valueType, value);
        }
        return result;
    }
    function read(type, input) {
        if (typeof input !== "object" || input === null) {
            throw invalid_type_1.createInvalidTypeError("object", input);
        }
        const result = new Map();
        for (const keyString in input) {
            let rawKey;
            try {
                rawKey = JSON.parse(keyString);
            }
            catch (err) {
                throw err;
            }
            const key = type.keyType.readJson(rawKey);
            const value = serializer.read(type.valueType, input[keyString]);
            result.set(key, value);
        }
        const error = type.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    function readTrusted(type, input) {
        const result = new Map();
        for (const keyString in input) {
            const key = type.keyType.readTrustedJson(JSON.parse(keyString));
            const value = serializer.readTrusted(type.valueType, input[keyString]);
            result.set(key, value);
        }
        return result;
    }
    serializer.register({
        typeName: map_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUk7UUFDSixXQUFXO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQW5ERCw0QkFtREMiLCJmaWxlIjoicXMvbWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBNYXBUeXBlLCBuYW1lIGFzIHR5cGVOYW1lIH0gZnJvbSBcIi4uL3R5cGVzL21hcFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoc2VyaWFsaXplcjogU2VyaWFsaXplcik6IHZvaWQge1xuICBmdW5jdGlvbiB3cml0ZTxLLCBWPih0eXBlOiBNYXBUeXBlPEssIFY+LCB2YWw6IE1hcDxLLCBWPik6IHtba2V5OiBzdHJpbmddOiBhbnl9IHtcbiAgICBjb25zdCByZXN1bHQ6IHtba2V5OiBzdHJpbmddOiBhbnl9ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdmFsKSB7XG4gICAgICBjb25zdCByYXdLZXk6IGFueSA9IHR5cGUua2V5VHlwZS53cml0ZUpzb24oa2V5KTtcbiAgICAgIGNvbnN0IGtleVN0cmluZzogc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocmF3S2V5KTtcbiAgICAgIC8vIFRPRE8oZGVtdXJnb3MpOiBDaGVjayBmb3IgZHVwbGljYXRlIGtleXNcbiAgICAgIHJlc3VsdFtrZXlTdHJpbmddID0gc2VyaWFsaXplci53cml0ZSh0eXBlLnZhbHVlVHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZDxLLCBWPih0eXBlOiBNYXBUeXBlPEssIFY+LCBpbnB1dDoge1trZXk6IHN0cmluZ106IGFueX0pOiBNYXA8SywgVj4ge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IoXCJvYmplY3RcIiwgaW5wdXQpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQ6IE1hcDxLLCBWPiA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGtleVN0cmluZyBpbiBpbnB1dCkge1xuICAgICAgbGV0IHJhd0tleTogYW55O1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmF3S2V5ID0gSlNPTi5wYXJzZShrZXlTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGtleTogSyA9IHR5cGUua2V5VHlwZS5yZWFkSnNvbihyYXdLZXkpO1xuICAgICAgY29uc3QgdmFsdWU6IFYgPSBzZXJpYWxpemVyLnJlYWQodHlwZS52YWx1ZVR5cGUsIGlucHV0W2tleVN0cmluZ10pO1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkID0gdHlwZS50ZXN0RXJyb3IocmVzdWx0KTtcbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkVHJ1c3RlZDxLLCBWPih0eXBlOiBNYXBUeXBlPEssIFY+LCBpbnB1dDoge1trZXk6IHN0cmluZ106IGFueX0pOiBNYXA8SywgVj4ge1xuICAgIGNvbnN0IHJlc3VsdDogTWFwPEssIFY+ID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3Qga2V5U3RyaW5nIGluIGlucHV0KSB7XG4gICAgICBjb25zdCBrZXk6IEsgPSB0eXBlLmtleVR5cGUucmVhZFRydXN0ZWRKc29uKEpTT04ucGFyc2Uoa2V5U3RyaW5nKSk7XG4gICAgICBjb25zdCB2YWx1ZTogViA9IHNlcmlhbGl6ZXIucmVhZFRydXN0ZWQodHlwZS52YWx1ZVR5cGUsIGlucHV0W2tleVN0cmluZ10pO1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNlcmlhbGl6ZXIucmVnaXN0ZXIoe1xuICAgIHR5cGVOYW1lLFxuICAgIHdyaXRlLFxuICAgIHJlYWQsXG4gICAgcmVhZFRydXN0ZWQsXG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9

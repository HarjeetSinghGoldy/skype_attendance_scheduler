import { Incident } from "incident";
import { createInvalidTypeError } from "../errors/invalid-type";
import { name as typeName } from "../types/simple-enum";
function write(type, value) {
    return type.valueToOutputName[value];
}
function read(type, input) {
    if (typeof input !== "string") {
        throw createInvalidTypeError("string", input);
    }
    if (!type.outputNameToValue.hasOwnProperty(input)) {
        throw Incident("Unknown enum variant name", input);
    }
    return type.outputNameToValue[input];
}
function readTrusted(type, input) {
    return type.outputNameToValue[input];
}
export const SERIALIZER = {
    typeName,
    write,
    read,
    readTrusted,
};
export function register(serializer) {
    serializer.register(SERIALIZER);
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_serializer_1 = require("../base-serializer");
const array_1 = require("./array");
const boolean_1 = require("./boolean");
const buffer_1 = require("./buffer");
const codepoint_string_1 = require("./codepoint-string");
const custom_1 = require("./custom");
const date_1 = require("./date");
const document_1 = require("./document");
const float64_1 = require("./float64");
const integer_1 = require("./integer");
const json_1 = require("./json");
const literal_1 = require("./literal");
const map_1 = require("./map");
const null_1 = require("./null");
const simple_enum_1 = require("./simple-enum");
const ucs2_string_1 = require("./ucs2-string");
const union_1 = require("./union");
const white_list_1 = require("./white-list");
function createQsSerializer() {
    const serializer = new base_serializer_1.BaseSerializer("qs");
    array_1.register(serializer);
    boolean_1.register(serializer);
    buffer_1.register(serializer);
    codepoint_string_1.register(serializer);
    custom_1.register(serializer);
    date_1.register(serializer);
    document_1.register(serializer);
    float64_1.register(serializer);
    integer_1.register(serializer);
    json_1.register(serializer);
    literal_1.register(serializer);
    map_1.register(serializer);
    null_1.register(serializer);
    simple_enum_1.register(serializer);
    ucs2_string_1.register(serializer);
    union_1.register(serializer);
    white_list_1.register(serializer);
    return serializer;
}
exports.createQsSerializer = createQsSerializer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInFzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0RBQW9EO0FBQ3BELG1DQUFvRDtBQUNwRCx1Q0FBd0Q7QUFDeEQscUNBQXNEO0FBQ3RELHlEQUF5RTtBQUN6RSxxQ0FBc0Q7QUFDdEQsaUNBQWtEO0FBQ2xELHlDQUEwRDtBQUMxRCx1Q0FBd0Q7QUFDeEQsdUNBQXdEO0FBQ3hELGlDQUFrRDtBQUNsRCx1Q0FBd0Q7QUFDeEQsK0JBQWdEO0FBQ2hELGlDQUFrRDtBQUNsRCwrQ0FBK0Q7QUFDL0QsK0NBQStEO0FBQy9ELG1DQUFvRDtBQUNwRCw2Q0FBNkQ7QUFFN0Q7SUFDRSxNQUFNLFVBQVUsR0FBbUIsSUFBSSxnQ0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVELGdCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsa0JBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixpQkFBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNCLDJCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLGlCQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsZUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pCLG1CQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLGtCQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUIsa0JBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixlQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekIsa0JBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixjQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEIsZUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pCLHNCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLHNCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLGdCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIscUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUIsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNwQixDQUFDO0FBcEJELGdEQW9CQyIsImZpbGUiOiJxcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VTZXJpYWxpemVyIH0gZnJvbSBcIi4uL2Jhc2Utc2VyaWFsaXplclwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJBcnJheSB9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckJvb2xlYW4gfSBmcm9tIFwiLi9ib29sZWFuXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckJ1ZmZlciB9IGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJDb2RlcG9pbnRTdHJpbmcgfSBmcm9tIFwiLi9jb2RlcG9pbnQtc3RyaW5nXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckN1c3RvbSB9IGZyb20gXCIuL2N1c3RvbVwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJEYXRlIH0gZnJvbSBcIi4vZGF0ZVwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJEb2N1bWVudCB9IGZyb20gXCIuL2RvY3VtZW50XCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckZsb2F0NjQgfSBmcm9tIFwiLi9mbG9hdDY0XCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckludGVnZXIgfSBmcm9tIFwiLi9pbnRlZ2VyXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3Rlckpzb24gfSBmcm9tIFwiLi9qc29uXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlckxpdGVyYWwgfSBmcm9tIFwiLi9saXRlcmFsXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3Rlck1hcCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJOdWxsIH0gZnJvbSBcIi4vbnVsbFwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJTaW1wbGVFbnVtIH0gZnJvbSBcIi4vc2ltcGxlLWVudW1cIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyVWNzMlN0cmluZyB9IGZyb20gXCIuL3VjczItc3RyaW5nXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlclVuaW9uIH0gZnJvbSBcIi4vdW5pb25cIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyV2hpdGVMaXN0IH0gZnJvbSBcIi4vd2hpdGUtbGlzdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUXNTZXJpYWxpemVyKCk6IEJhc2VTZXJpYWxpemVyIHtcbiAgY29uc3Qgc2VyaWFsaXplcjogQmFzZVNlcmlhbGl6ZXIgPSBuZXcgQmFzZVNlcmlhbGl6ZXIoXCJxc1wiKTtcbiAgcmVnaXN0ZXJBcnJheShzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJCb29sZWFuKHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlckJ1ZmZlcihzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJDb2RlcG9pbnRTdHJpbmcoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyQ3VzdG9tKHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlckRhdGUoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyRG9jdW1lbnQoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyRmxvYXQ2NChzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJJbnRlZ2VyKHNlcmlhbGl6ZXIpO1xuICByZWdpc3Rlckpzb24oc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyTGl0ZXJhbChzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJNYXAoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyTnVsbChzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJTaW1wbGVFbnVtKHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlclVjczJTdHJpbmcoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyVW5pb24oc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyV2hpdGVMaXN0KHNlcmlhbGl6ZXIpO1xuICByZXR1cm4gc2VyaWFsaXplcjtcbn1cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==

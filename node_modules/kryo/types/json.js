"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const not_implemented_1 = require("../errors/not-implemented");
exports.name = "json";
class JsonType {
    constructor() {
        this.name = exports.name;
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("ArrayType#toJSON");
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        return JSON.parse(JSON.stringify(input));
    }
    writeJson(val) {
        return JSON.parse(JSON.stringify(val));
    }
    testError(val) {
        try {
            JSON.parse(JSON.stringify(val));
            return undefined;
        }
        catch (err) {
            return err;
        }
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return JSON.stringify(val1) === JSON.stringify(val2);
    }
    clone(val) {
        return JSON.parse(JSON.stringify(val));
    }
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("JsonType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("JsonType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("JsonType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("JsonType#squash");
    }
}
exports.JsonType = JsonType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL2pzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBMkY7QUFJOUUsUUFBQSxJQUFJLEdBQVMsTUFBTSxDQUFDO0FBU2pDO0lBR0U7UUFGUyxTQUFJLEdBQVMsWUFBSSxDQUFDO0lBRzNCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSwyQ0FBeUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxlQUFlLENBQUMsS0FBa0I7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBVTtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFRO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVE7UUFDaEIsSUFBSSxDQUFDO1lBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNuQixDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDYixDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFRO1FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBUyxFQUFFLElBQVM7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQVE7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELElBQUksQ0FBQyxNQUFXLEVBQUUsTUFBVztRQUMzQixNQUFNLDJDQUF5QixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxLQUFLLENBQUMsTUFBVyxFQUFFLElBQXNCO1FBQ3ZDLE1BQU0sMkNBQXlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQXNCO1FBQ2hDLE1BQU0sMkNBQXlCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQXVCLEVBQUUsS0FBdUI7UUFDckQsTUFBTSwyQ0FBeUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQTFERCw0QkEwREMiLCJmaWxlIjoidHlwZXMvanNvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IsIE5vdEltcGxlbWVudGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL25vdC1pbXBsZW1lbnRlZFwiO1xuaW1wb3J0IHsgVmVyc2lvbmVkVHlwZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBOYW1lID0gXCJqc29uXCI7XG5leHBvcnQgY29uc3QgbmFtZTogTmFtZSA9IFwianNvblwiO1xuZXhwb3J0IG5hbWVzcGFjZSBqc29uIHtcbiAgZXhwb3J0IHR5cGUgSW5wdXQgPSBhbnk7XG4gIGV4cG9ydCB0eXBlIE91dHB1dCA9IGFueTtcbiAgLy8gVE9ETyhkZW11cmdvcyk6IEV4cG9ydCBvcHRpb25zIHRvIEpTT05cbiAgZXhwb3J0IHR5cGUgVHlwZSA9IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCB0eXBlIERpZmYgPSBhbnk7XG5cbmV4cG9ydCBjbGFzcyBKc29uVHlwZSBpbXBsZW1lbnRzIFZlcnNpb25lZFR5cGU8YW55LCBqc29uLklucHV0LCBqc29uLk91dHB1dCwgRGlmZj4ge1xuICByZWFkb25seSBuYW1lOiBOYW1lID0gbmFtZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHRvSlNPTigpOiBqc29uLlR5cGUge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJBcnJheVR5cGUjdG9KU09OXCIpO1xuICB9XG5cbiAgcmVhZFRydXN0ZWRKc29uKGlucHV0OiBqc29uLk91dHB1dCk6IGFueSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcmVhZEpzb24oaW5wdXQ6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKTtcbiAgfVxuXG4gIHdyaXRlSnNvbih2YWw6IGFueSk6IGpzb24uT3V0cHV0IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgfVxuXG4gIHRlc3RFcnJvcih2YWw6IGFueSk6IEVycm9yIHwgdW5kZWZpbmVkIHtcbiAgICB0cnkge1xuICAgICAgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgfVxuXG4gIHRlc3QodmFsOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0RXJyb3IodmFsKSA9PT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZXF1YWxzKHZhbDE6IGFueSwgdmFsMjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbDEpID09PSBKU09OLnN0cmluZ2lmeSh2YWwyKTtcbiAgfVxuXG4gIGNsb25lKHZhbDogYW55KTogYW55IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgfVxuXG4gIGRpZmYob2xkVmFsOiBhbnksIG5ld1ZhbDogYW55KTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIkpzb25UeXBlI2RpZmZcIik7XG4gIH1cblxuICBwYXRjaChvbGRWYWw6IGFueSwgZGlmZjogRGlmZiB8IHVuZGVmaW5lZCk6IGFueSB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIkpzb25UeXBlI3BhdGNoXCIpO1xuICB9XG5cbiAgcmV2ZXJzZURpZmYoZGlmZjogRGlmZiB8IHVuZGVmaW5lZCk6IERpZmYgfCB1bmRlZmluZWQge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJKc29uVHlwZSNyZXZlcnNlRGlmZlwiKTtcbiAgfVxuXG4gIHNxdWFzaChkaWZmMTogRGlmZiB8IHVuZGVmaW5lZCwgZGlmZjI6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICB0aHJvdyBjcmVhdGVOb3RJbXBsZW1lbnRlZEVycm9yKFwiSnNvblR5cGUjc3F1YXNoXCIpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

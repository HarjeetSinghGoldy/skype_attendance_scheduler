import { VersionedType } from "../types";
export declare type Name = "date";
export declare const name: Name;
export declare namespace json {
    type Input = string | number;
    type Output = string;
    interface Type {
        name: Name;
    }
}
export declare type Diff = number;
export declare class DateType implements VersionedType<Date, json.Input, json.Output, Diff> {
    readonly name: Name;
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): Date;
    readJson(input: any): Date;
    writeJson(val: Date): json.Output;
    testError(val: Date): Error | undefined;
    test(val: Date): val is Date;
    equals(val1: Date, val2: Date): boolean;
    clone(val: Date): Date;
    diff(oldVal: Date, newVal: Date): Diff | undefined;
    patch(oldVal: Date, diff: Diff | undefined): Date;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
}

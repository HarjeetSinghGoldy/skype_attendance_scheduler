import { Lazy, Serializer, Type } from "../types";
export declare type Name = "custom";
export declare const name: Name;
export declare type Read<T> = (input: any, serializer: Serializer) => T;
export declare type Write<T> = (value: T, serializer: Serializer) => any;
export declare type TestError<T> = (val: T) => Error | undefined;
export declare type Equals<T> = (val1: T, val2: T) => boolean;
export declare type Clone<T> = (val: T) => T;
export interface CustomTypeOptions<T> {
    read: Read<T>;
    write: Write<T>;
    testError: TestError<T>;
    equals: Equals<T>;
    clone: Clone<T>;
}
export declare class CustomType<T> implements Type<T> {
    readonly name: Name;
    readonly read: Read<T>;
    readonly write: Write<T>;
    readonly testError: TestError<T>;
    readonly equals: Equals<T>;
    readonly clone: Clone<T>;
    private _options?;
    constructor(options: Lazy<CustomTypeOptions<T>>);
    toJSON(): never;
    readTrustedJson(input: any): T;
    readJson(input: any): T;
    writeJson(value: T): any;
    test(val: T): boolean;
    private _applyOptions();
}

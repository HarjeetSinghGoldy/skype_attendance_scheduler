import { Lazy, VersionedType } from "../types";
export declare type Name = "white-list";
export declare const name: Name;
export declare namespace json {
    type Input = any;
    type Output = any;
    interface Type {
        name: Name;
    }
}
export declare type Diff = [number, number];
export interface WhiteListTypeOptions<T> {
    itemType: VersionedType<any, any, any, any>;
    values: T[];
}
export declare class WhiteListType<T> implements VersionedType<T, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly itemType: VersionedType<any, any, any, any>;
    readonly values: T[];
    private _options;
    constructor(options: Lazy<WhiteListTypeOptions<T>>);
    static fromJSON(options: json.Type): WhiteListType<any>;
    toJSON(): json.Type;
    readTrustedJson(val: json.Output): T;
    readJson(val: any): T;
    writeJson(val: T): json.Output;
    testError(val: T): Error | undefined;
    test(val: T): boolean;
    equals(val1: T, val2: T): boolean;
    clone(val: T): T;
    diff(oldVal: T, newVal: T): Diff | undefined;
    patch(oldVal: T, diff: Diff | undefined): T;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

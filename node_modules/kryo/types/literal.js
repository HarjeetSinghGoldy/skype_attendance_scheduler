"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
exports.name = "literal";
/**
 * You may need to explicitly write the type or inference won't pick it.
 * For example, in the case of enum values, inference will pick the type of the enum instead of
 * the specific property you pass.
 *
 * @see https://github.com/Microsoft/TypeScript/issues/10195
 */
class LiteralType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.type = undefined;
        this.value = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["type", "value"]);
        }
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("LiteralType#toJSON");
    }
    readTrustedJson(input) {
        return this.type.readTrustedJson(input);
    }
    readJson(input) {
        return this.type.readJson(input);
    }
    writeJson(val) {
        return this.type.writeJson(val);
    }
    testError(val) {
        const error = this.type.testError(val);
        if (error !== undefined) {
            return error;
        }
        if (!this.type.equals(val, this.value)) {
            return incident_1.Incident("InvalidLiteral", "Invalid literal value");
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return this.type.equals(val1, val2);
    }
    clone(val) {
        return this.type.clone(val);
    }
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("LiteralType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("LiteralType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("LiteralType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("LiteralType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function"
            ? this._options()
            : this._options;
        const type = options.type;
        const value = options.value;
        Object.assign(this, { type, value });
        Object.freeze(this);
    }
}
exports.LiteralType = LiteralType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

import { Lazy, VersionedType } from "../types";
export declare type Name = "integer";
export declare const name: Name;
export declare namespace json {
    type Input = number;
    type Output = number;
    interface Type {
        name: Name;
        min: number;
        max: number;
    }
}
export declare type Diff = number;
/**
 * Options for the `integer` type.
 */
export interface IntegerTypeOptions {
    /**
     * Inclusive minimum value.
     */
    min?: number;
    /**
     * Inclusive maximum value.
     */
    max?: number;
}
/**
 * Default value for the `min` option.
 * It corresponds to `-(2**53)`.
 */
export declare const DEFAULT_MIN: number;
/**
 * Default value for the `max` option.
 * It corresponds to `2**53 - 1`.
 */
export declare const DEFAULT_MAX: number;
export declare class IntegerType implements VersionedType<number, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly min: number;
    readonly max: number;
    private _options;
    constructor(options?: Lazy<IntegerTypeOptions>);
    static fromJSON(options: json.Type): IntegerType;
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): number;
    readJson(input: any): number;
    writeJson(val: number): json.Output;
    testError(val: number): Error | undefined;
    test(val: number): boolean;
    equals(val1: number, val2: number): boolean;
    clone(val: number): number;
    diff(oldVal: number, newVal: number): Diff | undefined;
    patch(oldVal: number, diff: Diff | undefined): number;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

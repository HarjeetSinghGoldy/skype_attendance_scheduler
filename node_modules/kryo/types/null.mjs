import { createInvalidTypeError } from "../errors/invalid-type";
export const name = "null";
export class NullType {
    constructor() {
        this.name = name;
    }
    toJSON() {
        return { name };
    }
    readTrustedJson(input) {
        return null;
    }
    readJson(input) {
        if (input !== null) {
            throw createInvalidTypeError("null", input);
        }
        return null;
    }
    writeJson(val) {
        return null;
    }
    testError(val) {
        if (val !== "null") {
            return createInvalidTypeError("null", val);
        }
        return undefined;
    }
    test(val) {
        return val === null;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
    patch(oldVal, diff) {
        return null;
    }
    reverseDiff(diff) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
    squash(diff1, diff2) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
}

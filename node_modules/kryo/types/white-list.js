"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const json_1 = require("../json");
exports.name = "white-list";
class WhiteListType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.itemType = undefined;
        this.values = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["itemType", "values"]);
        }
    }
    static fromJSON(options) {
        throw not_implemented_1.createNotImplementedError("WhiteListType.fromJSON");
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("TypedUnionType#toJSON");
    }
    readTrustedJson(val) {
        return json_1.JSON_SERIALIZER.readTrusted(this.itemType, val);
    }
    readJson(val) {
        const value = json_1.JSON_SERIALIZER.read(this.itemType, val);
        for (const allowed of this.values) {
            if (this.itemType.equals(value, allowed)) {
                return value;
            }
        }
        throw incident_1.Incident("UnkownVariant", "Unknown variant");
    }
    writeJson(val) {
        return json_1.JSON_SERIALIZER.write(this.itemType, val);
    }
    testError(val) {
        const error = this.itemType.testError(val);
        if (error !== undefined) {
            return error;
        }
        for (const allowed of this.values) {
            if (this.itemType.equals(val, allowed)) {
                return undefined;
            }
        }
        return incident_1.Incident("UnkownVariant", "Unknown variant");
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return this.itemType.equals(val1, val2);
    }
    clone(val) {
        return this.itemType.clone(val);
    }
    diff(oldVal, newVal) {
        return this.itemType.diff(oldVal, newVal);
    }
    patch(oldVal, diff) {
        return this.itemType.patch(oldVal, diff);
    }
    reverseDiff(diff) {
        return this.itemType.reverseDiff(diff);
    }
    squash(diff1, diff2) {
        return this.itemType.squash(diff1, diff2);
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const itemType = options.itemType;
        const values = options.values;
        Object.assign(this, { itemType, values });
        Object.freeze(this);
    }
}
exports.WhiteListType = WhiteListType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

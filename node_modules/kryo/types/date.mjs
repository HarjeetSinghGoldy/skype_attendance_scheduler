import { createInvalidTimestampError } from "../errors/invalid-timestamp";
import { createInvalidTypeError } from "../errors/invalid-type";
export const name = "date";
export class DateType {
    constructor() {
        this.name = name;
    }
    toJSON() {
        return { name };
    }
    readTrustedJson(input) {
        return new Date(input);
    }
    readJson(input) {
        let result;
        if (typeof input === "string") {
            result = new Date(input);
        }
        else if (typeof input === "number") {
            result = new Date(input);
        }
        else {
            throw createInvalidTypeError("string | number", input);
        }
        const error = this.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    writeJson(val) {
        return val.toISOString();
    }
    testError(val) {
        if (!(val instanceof Date)) {
            return createInvalidTypeError("Date", val);
        }
        const time = val.getTime();
        if (isNaN(time) || time > Number.MAX_SAFE_INTEGER || time < Number.MIN_SAFE_INTEGER) {
            return createInvalidTimestampError(val);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return val1.getTime() === val2.getTime();
    }
    clone(val) {
        return new Date(val.getTime());
    }
    diff(oldVal, newVal) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return newVal.getTime() - oldVal.getTime() || undefined;
    }
    patch(oldVal, diff) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return new Date(oldVal.getTime() + (diff || 0));
    }
    reverseDiff(diff) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return diff && -diff;
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2;
        }
        else if (diff2 === undefined) {
            return diff1;
        }
        return diff2 === -diff1 ? undefined : diff1 + diff2;
    }
}

import { VersionedType } from "../types";
export declare type Name = "null";
export declare const name: Name;
export declare namespace json {
    type Input = null;
    type Output = null;
    interface Type {
        name: Name;
    }
}
export declare type Diff = undefined;
export declare class NullType implements VersionedType<null, json.Input, json.Output, Diff> {
    readonly name: Name;
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): null;
    readJson(input: any): null;
    writeJson(val: null): json.Output;
    testError(val: null): Error | undefined;
    test(val: null): val is null;
    equals(val1: null, val2: null): boolean;
    clone(val: null): null;
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal: null, newVal: null): Diff | undefined;
    patch(oldVal: null, diff: Diff | undefined): null;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
}

import { CaseStyle } from "../case-style";
import { Lazy, VersionedType } from "../types";
export declare type SimpleEnum<EnumConstructor> = {
    [K in keyof EnumConstructor]: EnumConstructor[K];
};
export interface AnySimpleEnum {
    [name: string]: number;
}
export interface AnyReversedEnum {
    [value: number]: string;
}
export interface EnumConstructor<EnumValue extends number> {
    [name: string]: EnumValue;
}
export declare type Name = "simple-enum";
export declare const name: Name;
export declare namespace json {
    type Input = string;
    type Output = string;
    interface Type {
        name: Name;
        enum: EnumConstructor<number>;
    }
}
export declare type Diff = number;
export interface SimpleEnumTypeOptions<E extends number> {
    enum: EnumConstructor<E> | Object;
    rename?: CaseStyle;
}
/**
 * Supports enums from keys that are valid Javascript identifiers to unique integer values
 */
export declare class SimpleEnumType<E extends number> implements VersionedType<E, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly enum: EnumConstructor<E>;
    readonly rename?: CaseStyle;
    readonly outputNameToValue: AnySimpleEnum;
    readonly valueToOutputName: AnyReversedEnum;
    private _options;
    constructor(options: Lazy<SimpleEnumTypeOptions<E>>);
    static fromJSON(): SimpleEnumType<any>;
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): E;
    readJson(input: any): E;
    writeJson(val: E): json.Output;
    testError(val: E): Error | undefined;
    test(val: E): val is E;
    equals(val1: E, val2: E): boolean;
    clone(val: E): E;
    diff(oldVal: E, newVal: E): Diff | undefined;
    patch(oldVal: E, diff: Diff | undefined): E;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

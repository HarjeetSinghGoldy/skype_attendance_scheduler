import { createNotImplementedError } from "../errors/not-implemented";
export const name = "json";
export class JsonType {
    constructor() {
        this.name = name;
    }
    toJSON() {
        throw createNotImplementedError("ArrayType#toJSON");
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        return JSON.parse(JSON.stringify(input));
    }
    writeJson(val) {
        return JSON.parse(JSON.stringify(val));
    }
    testError(val) {
        try {
            JSON.parse(JSON.stringify(val));
            return undefined;
        }
        catch (err) {
            return err;
        }
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return JSON.stringify(val1) === JSON.stringify(val2);
    }
    clone(val) {
        return JSON.parse(JSON.stringify(val));
    }
    diff(oldVal, newVal) {
        throw createNotImplementedError("JsonType#diff");
    }
    patch(oldVal, diff) {
        throw createNotImplementedError("JsonType#patch");
    }
    reverseDiff(diff) {
        throw createNotImplementedError("JsonType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw createNotImplementedError("JsonType#squash");
    }
}

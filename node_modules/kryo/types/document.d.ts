import { CaseStyle } from "../case-style";
import { Lazy, Type as KryoType, VersionedType } from "../types";
export declare type Name = "document";
export declare const name: Name;
export declare namespace json {
    interface Type {
        name: Name;
    }
}
export interface Diff<T> {
    set: {
        [P in keyof T]?: any;
    };
    update: {
        [P in keyof T]?: any;
    };
    unset: {
        [P in keyof T]?: any;
    };
}
export interface DocumentTypeOptions<T> {
    /**
     * Do not throw error when the object contains extraneous keys.
     */
    ignoreExtraKeys?: boolean;
    /**
     * A dictionary between a property name and its description.
     */
    properties: {
        [P in keyof T]: PropertyDescriptor<KryoType<T[P]>>;
    };
    /**
     * The keys of the serialized documents are renamed following the
     * supplied style (undefined to keep the original name).
     */
    rename?: CaseStyle;
}
export interface PropertyDescriptor<MetaType extends KryoType<any>> {
    /**
     * Allows this property to be missing (undefined values throw errors).
     */
    optional?: boolean;
    /**
     * The type of this property.
     */
    type: MetaType;
}
export interface DocumentTypeConstructor {
    /**
     * Create a new document type checking for objects with the supplied properties.
     *
     * The generic type `T` is the interface described by this instance.
     *
     * @param options Options describing this document type.
     * @return The document type corresponding to the provided options
     */
    new <T>(options: Lazy<DocumentTypeOptions<T>>): DocumentType<T>;
}
export interface DocumentType<T> extends VersionedType<T, any, any, Diff<T>>, DocumentTypeOptions<T> {
}
export declare const DocumentType: DocumentTypeConstructor;
export declare function renameKeys<T>(obj: T, renameAll?: CaseStyle): Map<keyof T, string>;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const checked_ucs2_decode_1 = require("../_helpers/checked-ucs2-decode");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const lower_case_1 = require("../errors/lower-case");
const max_codepoints_1 = require("../errors/max-codepoints");
const min_codepoints_1 = require("../errors/min-codepoints");
const missing_dependency_1 = require("../errors/missing-dependency");
const not_trimmed_1 = require("../errors/not-trimmed");
const pattern_not_matched_1 = require("../errors/pattern-not-matched");
let unormNfc = undefined;
try {
    /* tslint:disable-next-line:no-var-requires no-require-imports */
    unormNfc = require("unorm").nfc;
}
catch (err) {
    // Ignore dependency not found error.
}
var Normalization;
(function (Normalization) {
    Normalization[Normalization["None"] = 0] = "None";
    Normalization[Normalization["Nfc"] = 1] = "Nfc";
})(Normalization = exports.Normalization || (exports.Normalization = {}));
exports.name = "codepoint-string";
class CodepointStringType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.normalization = undefined;
        this.enforceUnicodeRegExp = undefined;
        this.lowerCase = undefined;
        this.trimmed = undefined;
        this.maxCodepoints = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["normalization", "enforceUnicodeRegExp", "pattern", "lowerCase", "trimmed", "minCodepoints", "maxCodepoints"]);
        }
    }
    static fromJSON(options) {
        const resolvedOptions = {
            normalization: options.normalization === "none" ? Normalization.None : Normalization.Nfc,
            enforceUnicodeRegExp: options.enforceUnicodeRegExp,
            lowerCase: options.lowerCase,
            trimmed: options.trimmed,
            maxCodepoints: options.maxCodepoints,
        };
        if (options.pattern !== undefined) {
            resolvedOptions.pattern = new RegExp(options.pattern[0], options.pattern[1]);
        }
        if (options.minCodepoints !== undefined) {
            resolvedOptions.minCodepoints = options.minCodepoints;
        }
        return new CodepointStringType(resolvedOptions);
    }
    toJSON() {
        const jsonType = {
            name: exports.name,
            normalization: this.normalization === Normalization.None ? "none" : "nfc",
            enforceUnicodeRegExp: this.enforceUnicodeRegExp,
            lowerCase: this.lowerCase,
            trimmed: this.trimmed,
            maxCodepoints: this.maxCodepoints,
        };
        if (this.pattern !== undefined) {
            jsonType.pattern = [this.pattern.source, this.pattern.flags];
        }
        if (this.minCodepoints !== undefined) {
            jsonType.minCodepoints = this.minCodepoints;
        }
        return jsonType;
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        const error = this.testError(input);
        if (error !== undefined) {
            throw error;
        }
        return input;
    }
    writeJson(val) {
        return val;
    }
    testError(val) {
        if (!(typeof val === "string")) {
            return invalid_type_1.createInvalidTypeError("string", val);
        }
        switch (this.normalization) {
            case Normalization.Nfc:
                if (unormNfc === undefined) {
                    throw missing_dependency_1.createMissingDependencyError("unorm", "Required to normalize unicode strings to NFC.");
                }
                if (val !== unormNfc(val)) {
                    return incident_1.Incident("UnicodeNormalization", "Not NFC-Normalized");
                }
                break;
            case Normalization.None:
                break;
            default:
                throw new incident_1.Incident(`IncompleteSwitch: Received unexpected variant for this.normalization: ${this.normalization}`);
        }
        if (this.lowerCase && val !== val.toLowerCase()) {
            return lower_case_1.createLowerCaseError(val);
        }
        if (this.trimmed && val !== val.trim()) {
            return not_trimmed_1.createNotTrimmedError(val);
        }
        let codepointCount;
        try {
            codepointCount = checked_ucs2_decode_1.checkedUcs2Decode(val).length;
        }
        catch (err) {
            return err;
        }
        const minCodepoints = this.minCodepoints;
        if (typeof minCodepoints === "number" && codepointCount < minCodepoints) {
            return min_codepoints_1.createMinCodepointsError(val, codepointCount, minCodepoints);
        }
        if (codepointCount > this.maxCodepoints) {
            return max_codepoints_1.createMaxCodepointsError(val, codepointCount, this.maxCodepoints);
        }
        if (this.pattern instanceof RegExp) {
            if (!this.pattern.unicode && this.enforceUnicodeRegExp) {
                throw new incident_1.Incident("NonUnicodeRegExp", "Enforced unicode RegExp, use `enforceUnicodeRegExp = false` or `Ucs2StringType`");
            }
            if (!this.pattern.test(val)) {
                return pattern_not_matched_1.createPatternNotMatchedError(this.pattern, val);
            }
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    diff(oldVal, newVal) {
        return oldVal === newVal ? undefined : [oldVal, newVal];
    }
    patch(oldVal, diff) {
        return diff === undefined ? oldVal : diff[1];
    }
    reverseDiff(diff) {
        return diff === undefined ? undefined : [diff[1], diff[0]];
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2 === undefined ? undefined : [diff2[0], diff2[1]];
        }
        else if (diff2 === undefined) {
            return [diff1[0], diff1[1]];
        }
        return diff1[0] === diff2[1] ? undefined : [diff1[0], diff2[1]];
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const normalization = options.normalization !== undefined ?
            options.normalization :
            Normalization.Nfc;
        const enforceUnicodeRegExp = options.enforceUnicodeRegExp !== undefined ?
            options.enforceUnicodeRegExp :
            true;
        const pattern = options.pattern;
        const lowerCase = options.lowerCase !== undefined ? options.lowerCase : false;
        const trimmed = options.trimmed !== undefined ? options.trimmed : false;
        const minCodepoints = options.minCodepoints;
        const maxCodepoints = options.maxCodepoints;
        Object.assign(this, { normalization, enforceUnicodeRegExp, pattern, lowerCase, trimmed, minCodepoints, maxCodepoints });
        Object.freeze(this);
    }
}
exports.CodepointStringType = CodepointStringType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

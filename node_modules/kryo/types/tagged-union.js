"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const not_implemented_1 = require("../errors/not-implemented");
const literal_1 = require("./literal");
const simple_enum_1 = require("./simple-enum");
const union = __importStar(require("./union"));
exports.name = "tagged-union";
function getTagValuesWithBaseType(options) {
    const tagName = options.tag;
    let tagBaseType = undefined;
    const tagValuesMap = new Map();
    for (const variant of options.variants) {
        if (variant === undefined) {
            // tslint:disable-next-line:max-line-length
            throw new incident_1.Incident("UndefinedVariant", { variants: options.variants }, "The supplied TaggedUnion options contain undefined variants. If you have circular dependencies, try to use lazy options.");
        }
        if (!(tagName in variant.properties)) {
            throw new incident_1.Incident("TagNotFound", "Tag not found in variant of tagged union");
        }
        if (!(variant.properties[tagName].type instanceof literal_1.LiteralType)) {
            throw new incident_1.Incident("NonLiteralTag", "Tag property must be a literal type");
        }
        const curTag = variant.properties[tagName].type;
        if (tagBaseType === undefined) {
            // TODO: Use type name instead of instanceof
            if (curTag.type instanceof simple_enum_1.SimpleEnumType) {
                tagBaseType = curTag.type;
            }
            else {
                throw new incident_1.Incident("InvalidTagBaseType", "The base type of a tag property must be a simple enum");
            }
        }
        else if (curTag.type !== tagBaseType) {
            throw new incident_1.Incident("MixedTagBaseType", "All the variants of a tag property must have the same base type");
        }
        if (!(typeof curTag.value === "number" || typeof curTag.value === "string")) {
            throw new incident_1.Incident("InvalidTagValue", "The value of a tag property must be a number or string");
        }
        const value = curTag.value;
        if (tagValuesMap.has(value)) {
            throw new incident_1.Incident("DuplicateTagValue", "The tag values must be unique");
        }
        tagValuesMap.set(value, variant);
    }
    if (tagBaseType === undefined) {
        throw new incident_1.Incident("NoVariants");
    }
    return [tagValuesMap, tagBaseType];
}
/**
 * Create a map from the serialized label to the corresponding type variant
 *
 * @param tagName Name of the tag property
 * @param variants Type variants for this union, these should all be tagged document types
 * @param tagBaseType The underlying type of all the variants (must be a simple enum currently)
 * @param serializer The serializer to use to create the map
 * @return Map from the serialized label to the corresponding type variant.
 */
function createOutValuesMap(tagName, variants, tagBaseType, serializer) {
    const result = new Map();
    for (const variant of variants) {
        const curTag = variant.properties[tagName].type;
        const serialized = serializer.write(tagBaseType, curTag.value);
        if (!(typeof serialized === "number" || typeof serialized === "string")) {
            throw new incident_1.Incident("InvalidSerializedValue", { serialized });
        }
        if (result.has(serialized)) {
            throw new incident_1.Incident("DuplicateOutTagValue", "The serialized tag values must be unique");
        }
        result.set(serialized, variant);
    }
    return result;
}
function toUnionOptions(options) {
    const tagName = options.tag;
    // tslint:disable-next-line:max-line-length
    const [tagValuesMap, tagBaseType] = getTagValuesWithBaseType(options);
    const outValuesMaps = new WeakMap();
    const matcher = (value) => {
        if (typeof value !== "object" || value === null) {
            return undefined;
        }
        return tagValuesMap.get(value[tagName]);
    };
    const trustedMatcher = (value) => {
        return tagValuesMap.get(value[tagName]);
    };
    const readMatcher = (input, serializer) => {
        if (typeof input !== "object" || input === null) {
            return undefined;
        }
        let outValuesMap = outValuesMaps.get(serializer);
        if (outValuesMap === undefined) {
            outValuesMap = createOutValuesMap(tagName, options.variants, tagBaseType, serializer);
        }
        return outValuesMap.get(input[tagName]);
    };
    const readTrustedMatcher = (input, serializer) => {
        let outValuesMap = outValuesMaps.get(serializer);
        if (outValuesMap === undefined) {
            outValuesMap = createOutValuesMap(tagName, options.variants, tagBaseType, serializer);
        }
        return outValuesMap.get(input[tagName]);
    };
    return { variants: options.variants, matcher, trustedMatcher, readMatcher, readTrustedMatcher };
}
class TaggedUnionType extends union.UnionType {
    constructor(options) {
        super(typeof options === "function" ? () => toUnionOptions(options()) : toUnionOptions(options));
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("TaggedUnionType#toJSON");
    }
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("TaggedUnionType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("TaggedUnionType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("TaggedUnionType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("TaggedUnionType#squash");
    }
}
exports.TaggedUnionType = TaggedUnionType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

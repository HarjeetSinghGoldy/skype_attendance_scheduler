import { createNotImplementedError } from "../errors/not-implemented";
import * as union from "./union";
export const name = "try-union";
function toUnionOptions(options) {
    const variants = options.variants;
    const matcher = (value) => {
        for (const variant of variants) {
            if (variant.test(value)) {
                return variant;
            }
        }
        return undefined;
    };
    const readMatcher = (input, serializer) => {
        for (const variant of variants) {
            try {
                serializer.read(variant, input);
                return variant;
            }
            catch (err) {
                // Ignore error and try next variant
            }
        }
        return undefined;
    };
    return { variants: options.variants, matcher, readMatcher };
}
export class TryUnionType extends union.UnionType {
    constructor(options) {
        super(typeof options === "function" ? () => toUnionOptions(options()) : toUnionOptions(options));
    }
    toJSON() {
        throw createNotImplementedError("TryUnionType#toJSON");
    }
    diff(oldVal, newVal) {
        throw createNotImplementedError("TryUnionType#diff");
    }
    patch(oldVal, diff) {
        throw createNotImplementedError("TryUnionType#patch");
    }
    reverseDiff(diff) {
        throw createNotImplementedError("TryUnionType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw createNotImplementedError("TryUnionType#squash");
    }
}

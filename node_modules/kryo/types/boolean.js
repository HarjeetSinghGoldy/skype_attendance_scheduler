"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_type_1 = require("../errors/invalid-type");
exports.name = "boolean";
class BooleanType {
    constructor() {
        this.name = exports.name;
    }
    toJSON() {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        if (typeof input !== "boolean") {
            throw invalid_type_1.createInvalidTypeError("boolean", input);
        }
        return input;
    }
    writeJson(val) {
        return val;
    }
    testError(val) {
        if (typeof val !== "boolean") {
            return invalid_type_1.createInvalidTypeError("boolean", val);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return (oldVal !== newVal) || undefined;
    }
    patch(oldVal, diff) {
        return oldVal === (diff === undefined);
    }
    reverseDiff(diff) {
        return diff;
    }
    squash(diff1, diff2) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return (diff1 !== diff2) && undefined;
    }
}
exports.BooleanType = BooleanType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL2Jvb2xlYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBZ0U7QUFJbkQsUUFBQSxJQUFJLEdBQVMsU0FBUyxDQUFDO0FBSXBDO0lBQUE7UUFDVyxTQUFJLEdBQVMsWUFBSSxDQUFDO0lBK0Q3QixDQUFDO0lBN0RDLE1BQU07UUFDSiwrQ0FBK0M7UUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQWM7UUFDNUIsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBVTtRQUNqQixFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0scUNBQXNCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFZO1FBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVk7UUFDcEIsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMscUNBQXNCLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBWTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQWEsRUFBRSxJQUFhO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBWTtRQUNoQixNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLENBQUMsTUFBZSxFQUFFLE1BQWU7UUFDbkMseURBQXlEO1FBQ3pELE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFlLEVBQUUsSUFBc0I7UUFDM0MsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQXNCO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQXVCLEVBQUUsS0FBdUI7UUFDckQseURBQXlEO1FBQ3pELE1BQU0sQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUM7SUFDeEMsQ0FBQztDQUNGO0FBaEVELGtDQWdFQyIsImZpbGUiOiJ0eXBlcy9ib29sZWFuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBWZXJzaW9uZWRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIE5hbWUgPSBcImJvb2xlYW5cIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJib29sZWFuXCI7XG5cbmV4cG9ydCB0eXBlIERpZmYgPSBib29sZWFuO1xuXG5leHBvcnQgY2xhc3MgQm9vbGVhblR5cGUgaW1wbGVtZW50cyBWZXJzaW9uZWRUeXBlPGJvb2xlYW4sIGJvb2xlYW4sIGJvb2xlYW4sIERpZmY+IHtcbiAgcmVhZG9ubHkgbmFtZTogTmFtZSA9IG5hbWU7XG5cbiAgdG9KU09OKCk6IHVuZGVmaW5lZCB7XG4gICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnJldHVybi11bmRlZmluZWQgKi9cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmVhZFRydXN0ZWRKc29uKGlucHV0OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgcmVhZEpzb24oaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwiYm9vbGVhblwiLCBpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHdyaXRlSnNvbih2YWw6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgdGVzdEVycm9yKHZhbDogYm9vbGVhbik6IEVycm9yIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwiYm9vbGVhblwiLCB2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGVzdCh2YWw6IGJvb2xlYW4pOiB2YWwgaXMgYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGVzdEVycm9yKHZhbCkgPT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVxdWFscyh2YWwxOiBib29sZWFuLCB2YWwyOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XG4gIH1cblxuICBjbG9uZSh2YWw6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBvbGRWYWxcbiAgICogQHBhcmFtIG5ld1ZhbFxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlLCBgdW5kZWZpbmVkYCBvdGhlcndpc2VcbiAgICovXG4gIGRpZmYob2xkVmFsOiBib29sZWFuLCBuZXdWYWw6IGJvb2xlYW4pOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMgKi9cbiAgICByZXR1cm4gKG9sZFZhbCAhPT0gbmV3VmFsKSB8fCB1bmRlZmluZWQ7XG4gIH1cblxuICBwYXRjaChvbGRWYWw6IGJvb2xlYW4sIGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2xkVmFsID09PSAoZGlmZiA9PT0gdW5kZWZpbmVkKTtcbiAgfVxuXG4gIHJldmVyc2VEaWZmKGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxuXG4gIHNxdWFzaChkaWZmMTogRGlmZiB8IHVuZGVmaW5lZCwgZGlmZjI6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMgKi9cbiAgICByZXR1cm4gKGRpZmYxICE9PSBkaWZmMikgJiYgdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

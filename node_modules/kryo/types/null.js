"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_type_1 = require("../errors/invalid-type");
exports.name = "null";
class NullType {
    constructor() {
        this.name = exports.name;
    }
    toJSON() {
        return { name: exports.name };
    }
    readTrustedJson(input) {
        return null;
    }
    readJson(input) {
        if (input !== null) {
            throw invalid_type_1.createInvalidTypeError("null", input);
        }
        return null;
    }
    writeJson(val) {
        return null;
    }
    testError(val) {
        if (val !== "null") {
            return invalid_type_1.createInvalidTypeError("null", val);
        }
        return undefined;
    }
    test(val) {
        return val === null;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
    patch(oldVal, diff) {
        return null;
    }
    reverseDiff(diff) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
    squash(diff1, diff2) {
        /* tslint:disable-next-line:return-undefined */
        return undefined;
    }
}
exports.NullType = NullType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL251bGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBZ0U7QUFJbkQsUUFBQSxJQUFJLEdBQVMsTUFBTSxDQUFDO0FBV2pDO0lBQUE7UUFDVyxTQUFJLEdBQVMsWUFBSSxDQUFDO0lBK0Q3QixDQUFDO0lBN0RDLE1BQU07UUFDSixNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUosWUFBSSxFQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFrQjtRQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFVO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0scUNBQXNCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFTO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVM7UUFDakIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLHFDQUFzQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxDQUFDLEdBQVM7UUFDWixNQUFNLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVUsRUFBRSxJQUFVO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBUztRQUNiLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQUksQ0FBQyxNQUFZLEVBQUUsTUFBWTtRQUM3QiwrQ0FBK0M7UUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQVksRUFBRSxJQUFzQjtRQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFzQjtRQUNoQywrQ0FBK0M7UUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQXVCLEVBQUUsS0FBdUI7UUFDckQsK0NBQStDO1FBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBaEVELDRCQWdFQyIsImZpbGUiOiJ0eXBlcy9udWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBWZXJzaW9uZWRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIE5hbWUgPSBcIm51bGxcIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJudWxsXCI7XG5leHBvcnQgbmFtZXNwYWNlIGpzb24ge1xuICBleHBvcnQgdHlwZSBJbnB1dCA9IG51bGw7XG4gIGV4cG9ydCB0eXBlIE91dHB1dCA9IG51bGw7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUeXBlIHtcbiAgICBuYW1lOiBOYW1lO1xuICB9XG59XG5leHBvcnQgdHlwZSBEaWZmID0gdW5kZWZpbmVkO1xuXG5leHBvcnQgY2xhc3MgTnVsbFR5cGUgaW1wbGVtZW50cyBWZXJzaW9uZWRUeXBlPG51bGwsIGpzb24uSW5wdXQsIGpzb24uT3V0cHV0LCBEaWZmPiB7XG4gIHJlYWRvbmx5IG5hbWU6IE5hbWUgPSBuYW1lO1xuXG4gIHRvSlNPTigpOiBqc29uLlR5cGUge1xuICAgIHJldHVybiB7bmFtZX07XG4gIH1cblxuICByZWFkVHJ1c3RlZEpzb24oaW5wdXQ6IGpzb24uT3V0cHV0KTogbnVsbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZWFkSnNvbihpbnB1dDogYW55KTogbnVsbCB7XG4gICAgaWYgKGlucHV0ICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwibnVsbFwiLCBpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgd3JpdGVKc29uKHZhbDogbnVsbCk6IGpzb24uT3V0cHV0IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRlc3RFcnJvcih2YWw6IG51bGwpOiBFcnJvciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHZhbCAhPT0gXCJudWxsXCIpIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwibnVsbFwiLCB2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGVzdCh2YWw6IG51bGwpOiB2YWwgaXMgbnVsbCB7XG4gICAgcmV0dXJuIHZhbCA9PT0gbnVsbDtcbiAgfVxuXG4gIGVxdWFscyh2YWwxOiBudWxsLCB2YWwyOiBudWxsKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XG4gIH1cblxuICBjbG9uZSh2YWw6IG51bGwpOiBudWxsIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBvbGRWYWxcbiAgICogQHBhcmFtIG5ld1ZhbFxuICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlLCBgdW5kZWZpbmVkYCBvdGhlcndpc2VcbiAgICovXG4gIGRpZmYob2xkVmFsOiBudWxsLCBuZXdWYWw6IG51bGwpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cmV0dXJuLXVuZGVmaW5lZCAqL1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwYXRjaChvbGRWYWw6IG51bGwsIGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBudWxsIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldmVyc2VEaWZmKGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cmV0dXJuLXVuZGVmaW5lZCAqL1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBzcXVhc2goZGlmZjE6IERpZmYgfCB1bmRlZmluZWQsIGRpZmYyOiBEaWZmIHwgdW5kZWZpbmVkKTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnJldHVybi11bmRlZmluZWQgKi9cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

import { Lazy, VersionedType } from "../types";
export declare type Name = "buffer";
export declare const name: Name;
export declare namespace json {
    type Input = string;
    type Output = string;
    type Type = undefined;
}
export declare type Diff = any;
export interface BufferTypeOptions {
    maxLength: number;
}
export declare class BufferType implements VersionedType<Uint8Array, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly maxLength: number;
    private _options;
    constructor(options: Lazy<BufferTypeOptions>);
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): Uint8Array;
    readJson(input: any): Uint8Array;
    writeJson(val: Uint8Array): json.Output;
    testError(val: Uint8Array): Error | undefined;
    test(val: Uint8Array): boolean;
    equals(val1: Uint8Array, val2: Uint8Array): boolean;
    clone(val: Uint8Array): Uint8Array;
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal: Uint8Array, newVal: Uint8Array): Diff | undefined;
    patch(oldVal: Uint8Array, diff: Diff | undefined): Uint8Array;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

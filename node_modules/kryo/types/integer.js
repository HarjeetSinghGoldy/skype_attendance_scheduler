"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_integer_1 = require("../errors/invalid-integer");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
exports.name = "integer";
/**
 * Default value for the `min` option.
 * It corresponds to `-(2**53)`.
 */
exports.DEFAULT_MIN = Number.MIN_SAFE_INTEGER - 1;
/**
 * Default value for the `max` option.
 * It corresponds to `2**53 - 1`.
 */
exports.DEFAULT_MAX = Number.MAX_SAFE_INTEGER;
class IntegerType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.min = undefined;
        this.max = undefined;
        if (options === undefined) {
            this._options = {};
            this._applyOptions();
            return;
        }
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["min", "max"]);
        }
    }
    static fromJSON(options) {
        return new IntegerType(options);
    }
    toJSON() {
        return { name: exports.name, min: this.min, max: this.max };
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        let val;
        if (typeof input !== "number") {
            throw invalid_type_1.createInvalidTypeError("number", input);
        }
        val = input;
        const err = this.testError(val);
        if (err !== undefined) {
            throw err;
        }
        return val;
    }
    writeJson(val) {
        return val;
    }
    testError(val) {
        if (typeof val !== "number") {
            return invalid_type_1.createInvalidTypeError("number", val);
        }
        if (Math.round(val) !== val) {
            return invalid_integer_1.createInvalidIntegerError(val);
        }
        if (val < this.min || val > this.max) {
            return new incident_1.Incident("Range", { value: val, min: this.min, max: this.max }, "Integer not in range");
        }
        return undefined;
    }
    test(val) {
        return typeof val === "number" && val >= this.min && val <= this.max && Math.round(val) === val;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    diff(oldVal, newVal) {
        return newVal === oldVal ? undefined : newVal - oldVal;
    }
    patch(oldVal, diff) {
        return diff === undefined ? oldVal : oldVal + diff;
    }
    reverseDiff(diff) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return diff && -diff;
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2;
        }
        else if (diff2 === undefined) {
            return diff1;
        }
        return diff2 === -diff1 ? undefined : diff1 + diff2;
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const min = options.min !== undefined ? options.min : exports.DEFAULT_MIN;
        const max = options.max !== undefined ? options.max : exports.DEFAULT_MAX;
        Object.assign(this, { min, max });
        Object.freeze(this);
    }
}
exports.IntegerType = IntegerType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

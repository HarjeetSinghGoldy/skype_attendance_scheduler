import { Lazy } from "../types";
import { DocumentType } from "./document";
import * as union from "./union";
export declare type Name = "tagged-union";
export declare const name: Name;
export declare namespace json {
    interface Input {
        [key: string]: any;
    }
    interface Output {
        [key: string]: any;
    }
    type Type = undefined;
}
export declare type Diff = any;
export interface TaggedUnionTypeOptions<T extends {}> {
    variants: DocumentType<T>[];
    tag: keyof T;
}
export declare class TaggedUnionType<T extends {}> extends union.UnionType<T> {
    constructor(options: Lazy<TaggedUnionTypeOptions<T>>);
    toJSON(): json.Type;
    diff(oldVal: T, newVal: T): Diff | undefined;
    patch(oldVal: T, diff: Diff | undefined): T;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
}

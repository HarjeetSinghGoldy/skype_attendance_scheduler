"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazy_properties_1 = require("../_helpers/lazy-properties");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const index_1 = require("../json/index");
exports.name = "custom";
class CustomType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.read = undefined;
        this.write = undefined;
        this.testError = undefined;
        this.equals = undefined;
        this.clone = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["read", "write", "testError", "equals", "clone"]);
        }
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("CustomType#toJSON");
    }
    readTrustedJson(input) {
        return this.read(input, index_1.JSON_SERIALIZER);
    }
    readJson(input) {
        return this.read(input, index_1.JSON_SERIALIZER);
    }
    writeJson(value) {
        return this.write(value, index_1.JSON_SERIALIZER);
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        Object.assign(this, {
            read: options.read,
            write: options.write,
            testError: options.testError,
            equals: options.equals,
            clone: options.clone,
        });
        Object.freeze(this);
    }
}
exports.CustomType = CustomType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL2N1c3RvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGlFQUE2RDtBQUM3RCx5REFBZ0U7QUFDaEUsK0RBQXNFO0FBQ3RFLHlDQUFnRDtBQUluQyxRQUFBLElBQUksR0FBUyxRQUFRLENBQUM7QUFnQm5DO0lBVUUsWUFBWSxPQUFtQztRQVR0QyxTQUFJLEdBQVMsWUFBSSxDQUFDO1FBVXpCLDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsSUFBSSxHQUFTLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFTLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFTLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFTLFNBQVMsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFTLFNBQVMsQ0FBQztRQUU3QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixnQ0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDOUYsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSwyQ0FBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxlQUFlLENBQUMsS0FBVTtRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsdUJBQWUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBVTtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsdUJBQWUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBUTtRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsdUJBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBTTtRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sYUFBYTtRQUNuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxxQ0FBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBQ0QsTUFBTSxPQUFPLEdBQXlCLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM1RyxNQUFNLENBQUMsTUFBTSxDQUNYLElBQUksRUFDSjtZQUNFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtZQUNsQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7WUFDcEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTO1lBQzVCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7U0FDckIsQ0FDRixDQUFDO1FBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0Y7QUEvREQsZ0NBK0RDIiwiZmlsZSI6InR5cGVzL2N1c3RvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluY2lkZW50IH0gZnJvbSBcImluY2lkZW50XCI7XG5pbXBvcnQgeyBsYXp5UHJvcGVydGllcyB9IGZyb20gXCIuLi9faGVscGVycy9sYXp5LXByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxhenlPcHRpb25zRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2xhenktb3B0aW9uc1wiO1xuaW1wb3J0IHsgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbm90LWltcGxlbWVudGVkXCI7XG5pbXBvcnQgeyBKU09OX1NFUklBTElaRVIgfSBmcm9tIFwiLi4vanNvbi9pbmRleFwiO1xuaW1wb3J0IHsgTGF6eSwgU2VyaWFsaXplciwgVHlwZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBOYW1lID0gXCJjdXN0b21cIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJjdXN0b21cIjtcblxuZXhwb3J0IHR5cGUgUmVhZDxUPiA9IChpbnB1dDogYW55LCBzZXJpYWxpemVyOiBTZXJpYWxpemVyKSA9PiBUO1xuZXhwb3J0IHR5cGUgV3JpdGU8VD4gPSAodmFsdWU6IFQsIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIpID0+IGFueTtcbmV4cG9ydCB0eXBlIFRlc3RFcnJvcjxUPiA9ICh2YWw6IFQpID0+IEVycm9yIHwgdW5kZWZpbmVkO1xuZXhwb3J0IHR5cGUgRXF1YWxzPFQ+ID0gKHZhbDE6IFQsIHZhbDI6IFQpID0+IGJvb2xlYW47XG5leHBvcnQgdHlwZSBDbG9uZTxUPiA9ICh2YWw6IFQpID0+IFQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tVHlwZU9wdGlvbnM8VD4ge1xuICByZWFkOiBSZWFkPFQ+O1xuICB3cml0ZTogV3JpdGU8VD47XG4gIHRlc3RFcnJvcjogVGVzdEVycm9yPFQ+O1xuICBlcXVhbHM6IEVxdWFsczxUPjtcbiAgY2xvbmU6IENsb25lPFQ+O1xufVxuXG5leHBvcnQgY2xhc3MgQ3VzdG9tVHlwZTxUPiBpbXBsZW1lbnRzIFR5cGU8VD4ge1xuICByZWFkb25seSBuYW1lOiBOYW1lID0gbmFtZTtcbiAgcmVhZG9ubHkgcmVhZDogUmVhZDxUPjtcbiAgcmVhZG9ubHkgd3JpdGU6IFdyaXRlPFQ+O1xuICByZWFkb25seSB0ZXN0RXJyb3I6IFRlc3RFcnJvcjxUPjtcbiAgcmVhZG9ubHkgZXF1YWxzOiBFcXVhbHM8VD47XG4gIHJlYWRvbmx5IGNsb25lOiBDbG9uZTxUPjtcblxuICBwcml2YXRlIF9vcHRpb25zPzogTGF6eTxDdXN0b21UeXBlT3B0aW9uczxUPj47XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogTGF6eTxDdXN0b21UeXBlT3B0aW9uczxUPj4pIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgb25jZSBUUyAyLjcgaXMgYmV0dGVyIHN1cHBvcnRlZCBieSBlZGl0b3JzXG4gICAgdGhpcy5yZWFkID0gPGFueT4gdW5kZWZpbmVkO1xuICAgIHRoaXMud3JpdGUgPSA8YW55PiB1bmRlZmluZWQ7XG4gICAgdGhpcy50ZXN0RXJyb3IgPSA8YW55PiB1bmRlZmluZWQ7XG4gICAgdGhpcy5lcXVhbHMgPSA8YW55PiB1bmRlZmluZWQ7XG4gICAgdGhpcy5jbG9uZSA9IDxhbnk+IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLl9hcHBseU9wdGlvbnMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF6eVByb3BlcnRpZXModGhpcywgdGhpcy5fYXBwbHlPcHRpb25zLCBbXCJyZWFkXCIsIFwid3JpdGVcIiwgXCJ0ZXN0RXJyb3JcIiwgXCJlcXVhbHNcIiwgXCJjbG9uZVwiXSk7XG4gICAgfVxuICB9XG5cbiAgdG9KU09OKCk6IG5ldmVyIHtcbiAgICB0aHJvdyBjcmVhdGVOb3RJbXBsZW1lbnRlZEVycm9yKFwiQ3VzdG9tVHlwZSN0b0pTT05cIik7XG4gIH1cblxuICByZWFkVHJ1c3RlZEpzb24oaW5wdXQ6IGFueSk6IFQge1xuICAgIHJldHVybiB0aGlzLnJlYWQoaW5wdXQsIEpTT05fU0VSSUFMSVpFUik7XG4gIH1cblxuICByZWFkSnNvbihpbnB1dDogYW55KTogVCB7XG4gICAgcmV0dXJuIHRoaXMucmVhZChpbnB1dCwgSlNPTl9TRVJJQUxJWkVSKTtcbiAgfVxuXG4gIHdyaXRlSnNvbih2YWx1ZTogVCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMud3JpdGUodmFsdWUsIEpTT05fU0VSSUFMSVpFUik7XG4gIH1cblxuICB0ZXN0KHZhbDogVCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRlc3RFcnJvcih2YWwpID09PSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseU9wdGlvbnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY3JlYXRlTGF6eU9wdGlvbnNFcnJvcih0aGlzKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9uczogQ3VzdG9tVHlwZU9wdGlvbnM8VD4gPSB0eXBlb2YgdGhpcy5fb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5fb3B0aW9ucygpIDogdGhpcy5fb3B0aW9ucztcbiAgICBPYmplY3QuYXNzaWduKFxuICAgICAgdGhpcyxcbiAgICAgIHtcbiAgICAgICAgcmVhZDogb3B0aW9ucy5yZWFkLFxuICAgICAgICB3cml0ZTogb3B0aW9ucy53cml0ZSxcbiAgICAgICAgdGVzdEVycm9yOiBvcHRpb25zLnRlc3RFcnJvcixcbiAgICAgICAgZXF1YWxzOiBvcHRpb25zLmVxdWFscyxcbiAgICAgICAgY2xvbmU6IG9wdGlvbnMuY2xvbmUsXG4gICAgICB9LFxuICAgICk7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9

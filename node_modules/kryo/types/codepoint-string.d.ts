import { Lazy, VersionedType } from "../types";
export declare enum Normalization {
    None = 0,
    Nfc = 1,
}
export declare type Name = "codepoint-string";
export declare const name: Name;
export declare namespace json {
    type Input = string;
    type Output = string;
    interface Type {
        name: Name;
        normalization: "none" | "nfc";
        enforceUnicodeRegExp: boolean;
        pattern?: [string, string];
        lowerCase: boolean;
        /**
         * @see [[Ucs2StringOptions.trimmed]]
         */
        trimmed: boolean;
        minCodepoints?: number;
        maxCodepoints: number;
    }
}
export declare type Diff = [string, string];
export interface CodepointStringOptions {
    /**
     * Ensure NFC normalization when reading strings.
     *
     * References:
     * - http://unicode.org/faq/normalization.html
     * - http://unicode.org/reports/tr15/
     */
    normalization?: Normalization;
    enforceUnicodeRegExp?: boolean;
    pattern?: RegExp;
    lowerCase?: boolean;
    /**
     * The string cannot start or end with any of the following whitespace and line terminator
     * characters:
     *
     * - Unicode Character 'CHARACTER TABULATION' (U+0009)
     * - Unicode Character 'LINE FEED (LF)' (U+000A)
     * - Unicode Character 'LINE TABULATION' (U+000B)
     * - Unicode Character 'FORM FEED (FF)' (U+000C)
     * - Unicode Character 'CARRIAGE RETURN (CR)' (U+000D)
     * - Unicode Character 'SPACE' (U+0020)
     * - Unicode Character 'NO-BREAK SPACE' (U+00A0)
     * - Unicode Character 'LINE SEPARATOR' (U+2028)
     * - Unicode Character 'PARAGRAPH SEPARATOR' (U+2029)
     * - Unicode Character 'ZERO WIDTH NO-BREAK SPACE' (U+FEFF)
     * - Any other Unicode character of the "Separator, space" (Zs) general category
     *
     * @see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim>
     * @see <http://www.fileformat.info/info/unicode/category/Zs/list.htm>
     */
    trimmed?: boolean;
    minCodepoints?: number;
    maxCodepoints: number;
}
export declare class CodepointStringType implements VersionedType<string, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly normalization: Normalization;
    readonly enforceUnicodeRegExp: boolean;
    readonly pattern?: RegExp;
    readonly lowerCase: boolean;
    readonly trimmed: boolean;
    readonly minCodepoints?: number;
    readonly maxCodepoints: number;
    private _options;
    constructor(options: Lazy<CodepointStringOptions>);
    static fromJSON(options: json.Type): CodepointStringType;
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): string;
    readJson(input: any): string;
    writeJson(val: string): json.Output;
    testError(val: string): Error | undefined;
    test(val: string): boolean;
    equals(val1: string, val2: string): boolean;
    clone(val: string): string;
    diff(oldVal: string, newVal: string): Diff | undefined;
    patch(oldVal: string, diff: Diff | undefined): string;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

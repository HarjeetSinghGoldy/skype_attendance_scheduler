"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const lazy_options_1 = require("../errors/lazy-options");
const not_implemented_1 = require("../errors/not-implemented");
const index_1 = require("../json/index");
exports.name = "union";
class UnionType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.variants = undefined;
        this.matcher = undefined;
        this.trustedMatcher = undefined;
        this.readMatcher = undefined;
        this.readTrustedMatcher = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["variants", "matcher", "trustedMatcher", "readMatcher", "readTrustedMatcher"]);
        }
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("UnionType#toJSON");
    }
    readTrustedJsonWithVariant(input) {
        const variant = this.readTrustedMatcher(input, index_1.JSON_SERIALIZER);
        // TODO(demurgos): Avoid casting
        return [variant.readTrustedJson(input), variant];
    }
    readJsonWithVariant(input) {
        const variant = this.readMatcher(input, index_1.JSON_SERIALIZER);
        if (variant === undefined) {
            throw new incident_1.Incident("UnknownUnionVariant", "Unknown union variant");
        }
        // TODO(demurgos): Avoid casting
        return [variant.readJson(input), variant];
    }
    readTrustedJson(input) {
        return this.readTrustedJsonWithVariant(input)[0];
    }
    readJson(input) {
        return this.readJsonWithVariant(input)[0];
    }
    writeJson(val) {
        // TODO(demurgos): Avoid casting
        return this.trustedMatcher(val).writeJson(val);
    }
    testError(val) {
        const type = this.matcher(val);
        if (type === undefined) {
            return new incident_1.Incident("UnknownUnionVariant", "Unknown union variant");
        }
        return type.testError(val);
    }
    testWithVariant(val) {
        const variant = this.matcher(val);
        if (variant === undefined) {
            return [false, undefined];
        }
        return [variant.test(val), variant];
    }
    test(val) {
        const type = this.matcher(val);
        if (type === undefined) {
            return false;
        }
        return type.test(val);
    }
    // TODO: Always return true?
    equals(val1, val2) {
        const type1 = this.trustedMatcher(val1);
        const type2 = this.trustedMatcher(val2);
        return type1 === type2 && type1.equals(val1, val2);
    }
    clone(val) {
        return this.trustedMatcher(val).clone(val);
    }
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("UnionType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("UnionType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("UnionType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("UnionType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function"
            ? this._options()
            : this._options;
        delete this._options;
        const variants = options.variants;
        const matcher = options.matcher;
        let trustedMatcher;
        if (options.trustedMatcher !== undefined) {
            trustedMatcher = options.trustedMatcher;
        }
        else {
            trustedMatcher = (value) => {
                const variant = matcher(value);
                if (variant === undefined) {
                    throw new incident_1.Incident("UnknownUnionVariant", "Unknown union variant");
                }
                return variant;
            };
        }
        const readMatcher = options.readMatcher;
        let readTrustedMatcher;
        if (options.readTrustedMatcher !== undefined) {
            readTrustedMatcher = options.readTrustedMatcher;
        }
        else {
            readTrustedMatcher = (input, serializer) => {
                const variant = readMatcher(input, serializer);
                if (variant === undefined) {
                    throw new incident_1.Incident("UnknownUnionVariant", { input, serializer }, "Unknown union variant");
                }
                return variant;
            };
        }
        Object.assign(this, { variants, matcher, trustedMatcher, readMatcher, readTrustedMatcher });
        Object.freeze(this);
    }
}
exports.UnionType = UnionType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

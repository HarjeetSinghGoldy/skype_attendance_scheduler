"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_timestamp_1 = require("../errors/invalid-timestamp");
const invalid_type_1 = require("../errors/invalid-type");
exports.name = "date";
class DateType {
    constructor() {
        this.name = exports.name;
    }
    toJSON() {
        return { name: exports.name };
    }
    readTrustedJson(input) {
        return new Date(input);
    }
    readJson(input) {
        let result;
        if (typeof input === "string") {
            result = new Date(input);
        }
        else if (typeof input === "number") {
            result = new Date(input);
        }
        else {
            throw invalid_type_1.createInvalidTypeError("string | number", input);
        }
        const error = this.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    writeJson(val) {
        return val.toISOString();
    }
    testError(val) {
        if (!(val instanceof Date)) {
            return invalid_type_1.createInvalidTypeError("Date", val);
        }
        const time = val.getTime();
        if (isNaN(time) || time > Number.MAX_SAFE_INTEGER || time < Number.MIN_SAFE_INTEGER) {
            return invalid_timestamp_1.createInvalidTimestampError(val);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return val1.getTime() === val2.getTime();
    }
    clone(val) {
        return new Date(val.getTime());
    }
    diff(oldVal, newVal) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return newVal.getTime() - oldVal.getTime() || undefined;
    }
    patch(oldVal, diff) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return new Date(oldVal.getTime() + (diff || 0));
    }
    reverseDiff(diff) {
        /* tslint:disable-next-line:strict-boolean-expressions */
        return diff && -diff;
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2;
        }
        else if (diff2 === undefined) {
            return diff1;
        }
        return diff2 === -diff1 ? undefined : diff1 + diff2;
    }
}
exports.DateType = DateType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL2RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtRUFBMEU7QUFDMUUseURBQWdFO0FBSW5ELFFBQUEsSUFBSSxHQUFTLE1BQU0sQ0FBQztBQVdqQztJQUFBO1FBQ1csU0FBSSxHQUFTLFlBQUksQ0FBQztJQTZFN0IsQ0FBQztJQTNFQyxNQUFNO1FBQ0osTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFKLFlBQUksRUFBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBa0I7UUFDaEMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBVTtRQUNqQixJQUFJLE1BQVksQ0FBQztRQUNqQixFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0scUNBQXNCLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUNELE1BQU0sS0FBSyxHQUFzQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFTO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFTO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxxQ0FBc0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUNELE1BQU0sSUFBSSxHQUFXLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNwRixNQUFNLENBQUMsK0NBQTJCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFTO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBVSxFQUFFLElBQVU7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFTO1FBQ2IsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBWSxFQUFFLE1BQVk7UUFDN0IseURBQXlEO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLFNBQVMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQVksRUFBRSxJQUFzQjtRQUN4Qyx5REFBeUQ7UUFDekQsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxXQUFXLENBQUMsSUFBc0I7UUFDaEMseURBQXlEO1FBQ3pELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUF1QixFQUFFLEtBQXVCO1FBQ3JELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQTlFRCw0QkE4RUMiLCJmaWxlIjoidHlwZXMvZGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUludmFsaWRUaW1lc3RhbXBFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10aW1lc3RhbXBcIjtcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtdHlwZVwiO1xuaW1wb3J0IHsgVmVyc2lvbmVkVHlwZSB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBOYW1lID0gXCJkYXRlXCI7XG5leHBvcnQgY29uc3QgbmFtZTogTmFtZSA9IFwiZGF0ZVwiO1xuZXhwb3J0IG5hbWVzcGFjZSBqc29uIHtcbiAgZXhwb3J0IHR5cGUgSW5wdXQgPSBzdHJpbmcgfCBudW1iZXI7XG4gIGV4cG9ydCB0eXBlIE91dHB1dCA9IHN0cmluZztcblxuICBleHBvcnQgaW50ZXJmYWNlIFR5cGUge1xuICAgIG5hbWU6IE5hbWU7XG4gIH1cbn1cbmV4cG9ydCB0eXBlIERpZmYgPSBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVHlwZSBpbXBsZW1lbnRzIFZlcnNpb25lZFR5cGU8RGF0ZSwganNvbi5JbnB1dCwganNvbi5PdXRwdXQsIERpZmY+IHtcbiAgcmVhZG9ubHkgbmFtZTogTmFtZSA9IG5hbWU7XG5cbiAgdG9KU09OKCk6IGpzb24uVHlwZSB7XG4gICAgcmV0dXJuIHtuYW1lfTtcbiAgfVxuXG4gIHJlYWRUcnVzdGVkSnNvbihpbnB1dDoganNvbi5PdXRwdXQpOiBEYXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW5wdXQpO1xuICB9XG5cbiAgcmVhZEpzb24oaW5wdXQ6IGFueSk6IERhdGUge1xuICAgIGxldCByZXN1bHQ6IERhdGU7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVzdWx0ID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXN1bHQgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IoXCJzdHJpbmcgfCBudW1iZXJcIiwgaW5wdXQpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQgPSB0aGlzLnRlc3RFcnJvcihyZXN1bHQpO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHdyaXRlSnNvbih2YWw6IERhdGUpOiBqc29uLk91dHB1dCB7XG4gICAgcmV0dXJuIHZhbC50b0lTT1N0cmluZygpO1xuICB9XG5cbiAgdGVzdEVycm9yKHZhbDogRGF0ZSk6IEVycm9yIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoISh2YWwgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWRUeXBlRXJyb3IoXCJEYXRlXCIsIHZhbCk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWU6IG51bWJlciA9IHZhbC5nZXRUaW1lKCk7XG4gICAgaWYgKGlzTmFOKHRpbWUpIHx8IHRpbWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCB0aW1lIDwgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkVGltZXN0YW1wRXJyb3IodmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdGVzdCh2YWw6IERhdGUpOiB2YWwgaXMgRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdEVycm9yKHZhbCkgPT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVxdWFscyh2YWwxOiBEYXRlLCB2YWwyOiBEYXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbDEuZ2V0VGltZSgpID09PSB2YWwyLmdldFRpbWUoKTtcbiAgfVxuXG4gIGNsb25lKHZhbDogRGF0ZSk6IERhdGUge1xuICAgIHJldHVybiBuZXcgRGF0ZSh2YWwuZ2V0VGltZSgpKTtcbiAgfVxuXG4gIGRpZmYob2xkVmFsOiBEYXRlLCBuZXdWYWw6IERhdGUpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMgKi9cbiAgICByZXR1cm4gbmV3VmFsLmdldFRpbWUoKSAtIG9sZFZhbC5nZXRUaW1lKCkgfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgcGF0Y2gob2xkVmFsOiBEYXRlLCBkaWZmOiBEaWZmIHwgdW5kZWZpbmVkKTogRGF0ZSB7XG4gICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zICovXG4gICAgcmV0dXJuIG5ldyBEYXRlKG9sZFZhbC5nZXRUaW1lKCkgKyAoZGlmZiB8fCAwKSk7XG4gIH1cblxuICByZXZlcnNlRGlmZihkaWZmOiBEaWZmIHwgdW5kZWZpbmVkKTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zICovXG4gICAgcmV0dXJuIGRpZmYgJiYgLWRpZmY7XG4gIH1cblxuICBzcXVhc2goZGlmZjE6IERpZmYgfCB1bmRlZmluZWQsIGRpZmYyOiBEaWZmIHwgdW5kZWZpbmVkKTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGRpZmYxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkaWZmMjtcbiAgICB9IGVsc2UgaWYgKGRpZmYyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkaWZmMTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmYyID09PSAtZGlmZjEgPyB1bmRlZmluZWQgOiBkaWZmMSArIGRpZmYyO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

import { lazyProperties } from "../_helpers/lazy-properties";
import { createInvalidTypeError } from "../errors/invalid-type";
import { createLazyOptionsError } from "../errors/lazy-options";
import { createMaxArrayLengthError } from "../errors/max-array-length";
import { createNotImplementedError } from "../errors/not-implemented";
export const name = "buffer";
export class BufferType {
    constructor(options) {
        this.name = name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.maxLength = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazyProperties(this, this._applyOptions, ["maxLength"]);
        }
    }
    toJSON() {
        throw createNotImplementedError("BufferType#toJSON");
    }
    readTrustedJson(input) {
        const len = input.length / 2;
        const result = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            result[i] = parseInt(input.substr(2 * i, 2), 16);
        }
        return result;
    }
    readJson(input) {
        let result;
        if (typeof input !== "string") {
            throw createInvalidTypeError("string", input);
        }
        else if (!/^(?:[0-9a-f]{2})*$/.test(input)) {
            throw createInvalidTypeError("lowerCaseHexEvenLengthString", input);
        }
        const len = input.length / 2;
        result = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            result[i] = parseInt(input.substr(2 * i, 2), 16);
        }
        const error = this.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    writeJson(val) {
        const result = new Array(val.length);
        const len = val.length;
        for (let i = 0; i < len; i++) {
            result[i] = (val[i] < 16 ? "0" : "") + val[i].toString(16);
        }
        return result.join("");
    }
    testError(val) {
        if (!(val instanceof Uint8Array)) {
            return createInvalidTypeError("Uint8Array", val);
        }
        if (this.maxLength !== undefined && val.length > this.maxLength) {
            return createMaxArrayLengthError(val, this.maxLength);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        if (val2.length !== val1.length) {
            return false;
        }
        for (let i = 0; i < val1.length; i++) {
            if (val2[i] !== val1[i]) {
                return false;
            }
        }
        return true;
    }
    clone(val) {
        return Uint8Array.from(val);
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        throw createNotImplementedError("BufferType#diff");
    }
    patch(oldVal, diff) {
        throw createNotImplementedError("BufferType#patch");
    }
    reverseDiff(diff) {
        throw createNotImplementedError("BufferType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw createNotImplementedError("BufferType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const maxLength = options.maxLength;
        Object.assign(this, { maxLength });
        Object.freeze(this);
    }
}

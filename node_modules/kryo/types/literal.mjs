import { Incident } from "incident";
import { lazyProperties } from "../_helpers/lazy-properties";
import { createLazyOptionsError } from "../errors/lazy-options";
import { createNotImplementedError } from "../errors/not-implemented";
export const name = "literal";
/**
 * You may need to explicitly write the type or inference won't pick it.
 * For example, in the case of enum values, inference will pick the type of the enum instead of
 * the specific property you pass.
 *
 * @see https://github.com/Microsoft/TypeScript/issues/10195
 */
export class LiteralType {
    constructor(options) {
        this.name = name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.type = undefined;
        this.value = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazyProperties(this, this._applyOptions, ["type", "value"]);
        }
    }
    toJSON() {
        throw createNotImplementedError("LiteralType#toJSON");
    }
    readTrustedJson(input) {
        return this.type.readTrustedJson(input);
    }
    readJson(input) {
        return this.type.readJson(input);
    }
    writeJson(val) {
        return this.type.writeJson(val);
    }
    testError(val) {
        const error = this.type.testError(val);
        if (error !== undefined) {
            return error;
        }
        if (!this.type.equals(val, this.value)) {
            return Incident("InvalidLiteral", "Invalid literal value");
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return this.type.equals(val1, val2);
    }
    clone(val) {
        return this.type.clone(val);
    }
    diff(oldVal, newVal) {
        throw createNotImplementedError("LiteralType#diff");
    }
    patch(oldVal, diff) {
        throw createNotImplementedError("LiteralType#patch");
    }
    reverseDiff(diff) {
        throw createNotImplementedError("LiteralType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw createNotImplementedError("LiteralType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw createLazyOptionsError(this);
        }
        const options = typeof this._options === "function"
            ? this._options()
            : this._options;
        const type = options.type;
        const value = options.value;
        Object.assign(this, { type, value });
        Object.freeze(this);
    }
}

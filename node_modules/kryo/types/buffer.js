"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const max_array_length_1 = require("../errors/max-array-length");
const not_implemented_1 = require("../errors/not-implemented");
exports.name = "buffer";
class BufferType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.maxLength = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["maxLength"]);
        }
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("BufferType#toJSON");
    }
    readTrustedJson(input) {
        const len = input.length / 2;
        const result = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            result[i] = parseInt(input.substr(2 * i, 2), 16);
        }
        return result;
    }
    readJson(input) {
        let result;
        if (typeof input !== "string") {
            throw invalid_type_1.createInvalidTypeError("string", input);
        }
        else if (!/^(?:[0-9a-f]{2})*$/.test(input)) {
            throw invalid_type_1.createInvalidTypeError("lowerCaseHexEvenLengthString", input);
        }
        const len = input.length / 2;
        result = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            result[i] = parseInt(input.substr(2 * i, 2), 16);
        }
        const error = this.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    writeJson(val) {
        const result = new Array(val.length);
        const len = val.length;
        for (let i = 0; i < len; i++) {
            result[i] = (val[i] < 16 ? "0" : "") + val[i].toString(16);
        }
        return result.join("");
    }
    testError(val) {
        if (!(val instanceof Uint8Array)) {
            return invalid_type_1.createInvalidTypeError("Uint8Array", val);
        }
        if (this.maxLength !== undefined && val.length > this.maxLength) {
            return max_array_length_1.createMaxArrayLengthError(val, this.maxLength);
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        if (val2.length !== val1.length) {
            return false;
        }
        for (let i = 0; i < val1.length; i++) {
            if (val2[i] !== val1[i]) {
                return false;
            }
        }
        return true;
    }
    clone(val) {
        return Uint8Array.from(val);
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("BufferType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("BufferType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("BufferType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("BufferType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const maxLength = options.maxLength;
        Object.assign(this, { maxLength });
        Object.freeze(this);
    }
}
exports.BufferType = BufferType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

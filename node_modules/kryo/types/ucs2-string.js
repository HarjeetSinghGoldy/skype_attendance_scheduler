"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const lower_case_1 = require("../errors/lower-case");
const max_ucs2_string_length_1 = require("../errors/max-ucs2-string-length");
const min_ucs2_string_length_1 = require("../errors/min-ucs2-string-length");
const not_trimmed_1 = require("../errors/not-trimmed");
const pattern_not_matched_1 = require("../errors/pattern-not-matched");
exports.name = "ucs2-string";
/**
 * The type used for simple Javascript strings.
 * Javascript strings expose characters as UCS2 code units. This is a fixed-size encoding that supports the unicode
 * codepoints from U+000000 to U+00FFFF (Basic Multilingual Plane or BMP). Displaying larger codepoints is
 * a property of the environment based on UTF-16 surrogate pairs. Unicode does not, and will never, assign
 * characters to the codepoints from U+OOD800 to U+00DFFF. These spare codepoints allows UTF16 to combine
 * codeunits from 0xd800 to 0xdfff in pairs (called surrogate pairs) to represent codepoints from supplementary planes.
 * This transformation happens during the transition from codeunits to codepoints in UTF-16.
 * In UCS2, the codeunits from 0xd800 to 0xdfff directly produce codepoints in the range from U+OOD8OO to
 * U+OODFF. Then, the display might merge these codepoints into higher codepoints during the rendering.
 *
 *
 * Lets take an example (all the numbers are in hexadecimal):
 *
 * ```
 *                                         +---+---+---+---+---+---+
 * Bytes                                   | 00| 41| d8| 34| dd| 1e|
 *                                         +---+---+---+---+---+---+
 * UTF-16BE codeunits                      | 0x0041| 0xd834| 0xdd1e|
 *                                         +-------+-------+-------+
 * Codepoints (from UTF-16BE)              |  U+41 |   U+01D11E    |
 *                                         +-------+---------------+
 * Displayed (from UTF-16BE)               |   A   |       ùÑû       |
 *                                         +-------+-------+-------+
 * UCS2 codeunits                          | 0x0041| 0xd834| 0xdd1e|
 *                                         +-------+-------+-------+
 * Codepoints (from UCS2BE)                |  U+41 | U+D834| U+DD1E|  <- This is what Javascript sees
 *                                         +-------+-------+-------+
 * Displayed (from UCS2BE)                 |   A   |   ÔøΩ   |   ÔøΩ   |  <- This is what the user may see
 *                                         +-------+-------+-------+
 * Displayed (from UCS2BE with surrogates) |   A   |       ùÑû       |  <- This is what the user may see
 *                                         +-------+---------------+
 * ```
 *
 * The most important takeaway is that codepoints outside of the BMP are a property of the display, not of
 * the Javascript string.
 * This is the cause of multiple issues.
 * - Surrogate halves are exposed as distinct characters: `"ùÑû".length === 2`
 * - Unmatched surrogate halves are allowed: `"\ud834"`
 * - Surrogate pairs in the wrong order are allowed: `"\udd1e\ud834"`
 *
 * If you need to support the full unicode range by manipulating codepoints instead of UCS2 character codes, you may
 * want to use CodepointString or CodepointArray instead of Ucs2String.
 *
 * PS: This type does not deal with Unicdoe normalization either. Use CodepointString and CodepointArray if you need
 * it.
 */
class Ucs2StringType {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.allowUnicodeRegExp = undefined;
        this.lowerCase = undefined;
        this.trimmed = undefined;
        this.maxLength = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["allowUnicodeRegExp", "pattern", "lowerCase", "trimmed", "minLength", "maxLength"]);
        }
    }
    static fromJSON(options) {
        const resolvedOptions = {
            allowUnicodeRegExp: options.allowUnicodeRegExp,
            lowerCase: options.lowerCase,
            trimmed: options.trimmed,
            maxLength: options.maxLength,
        };
        if (options.pattern !== undefined) {
            resolvedOptions.pattern = new RegExp(options.pattern[0], options.pattern[1]);
        }
        if (options.minLength !== undefined) {
            resolvedOptions.minLength = options.minLength;
        }
        return new Ucs2StringType(resolvedOptions);
    }
    toJSON() {
        const jsonType = {
            name: exports.name,
            allowUnicodeRegExp: this.allowUnicodeRegExp,
            lowerCase: this.lowerCase,
            trimmed: this.trimmed,
            maxLength: this.maxLength,
        };
        if (this.pattern !== undefined) {
            jsonType.pattern = [this.pattern.source, this.pattern.flags];
        }
        if (this.minLength !== undefined) {
            jsonType.minLength = this.minLength;
        }
        return jsonType;
    }
    readTrustedJson(input) {
        return input;
    }
    readJson(input) {
        const error = this.testError(input);
        if (error !== undefined) {
            throw error;
        }
        return input;
    }
    writeJson(val) {
        return val;
    }
    testError(val) {
        if (typeof val !== "string") {
            return invalid_type_1.createInvalidTypeError("string", val);
        }
        if (this.lowerCase && val.toLowerCase() !== val) {
            return lower_case_1.createLowerCaseError(val);
        }
        if (this.trimmed && val.trim() !== val) {
            return not_trimmed_1.createNotTrimmedError(val);
        }
        const strLen = val.length;
        const minLength = this.minLength;
        if (minLength !== undefined && strLen < minLength) {
            return min_ucs2_string_length_1.createMinUcs2StringLengthError(val, minLength);
        }
        if (strLen > this.maxLength) {
            return max_ucs2_string_length_1.createMaxUcs2StringLengthError(val, this.maxLength);
        }
        if (this.pattern instanceof RegExp) {
            if (this.pattern.unicode && !this.allowUnicodeRegExp) {
                throw new incident_1.Incident("UnicodeRegExp", "Disallowed unicode RegExp, use `allowUnicodeRegExp` or `CodepointStringType`");
            }
            if (!this.pattern.test(val)) {
                return pattern_not_matched_1.createPatternNotMatchedError(this.pattern, val);
            }
        }
        return undefined;
    }
    test(val) {
        return this.testError(val) === undefined;
    }
    equals(val1, val2) {
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    diff(oldVal, newVal) {
        return oldVal === newVal ? undefined : [oldVal, newVal];
    }
    patch(oldVal, diff) {
        return diff === undefined ? oldVal : diff[1];
    }
    reverseDiff(diff) {
        return diff === undefined ? undefined : [diff[1], diff[0]];
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2 === undefined ? undefined : [diff2[0], diff2[1]];
        }
        else if (diff2 === undefined) {
            return [diff1[0], diff1[1]];
        }
        return diff1[0] === diff2[1] ? undefined : [diff1[0], diff2[1]];
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const allowUnicodeRegExp = options.allowUnicodeRegExp !== undefined ? options.allowUnicodeRegExp : true;
        const pattern = options.pattern;
        const lowerCase = options.lowerCase !== undefined ? options.lowerCase : false;
        const trimmed = options.trimmed !== undefined ? options.trimmed : false;
        const minLength = options.minLength;
        const maxLength = options.maxLength;
        Object.assign(this, { allowUnicodeRegExp, pattern, lowerCase, trimmed, minLength, maxLength });
        Object.freeze(this);
    }
}
exports.Ucs2StringType = Ucs2StringType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL3VjczItc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQW9DO0FBQ3BDLGlFQUE2RDtBQUM3RCx5REFBZ0U7QUFDaEUseURBQWdFO0FBQ2hFLHFEQUE0RDtBQUM1RCw2RUFBa0Y7QUFDbEYsNkVBQWtGO0FBQ2xGLHVEQUE4RDtBQUM5RCx1RUFBNkU7QUFJaEUsUUFBQSxJQUFJLEdBQVMsYUFBYSxDQUFDO0FBaUR4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThDRztBQUNIO0lBV0UsWUFBWSxPQUFvQztRQVZ2QyxTQUFJLEdBQVMsWUFBSSxDQUFDO1FBV3pCLDBEQUEwRDtRQUMxRCxJQUFJLENBQUMsa0JBQWtCLEdBQVMsU0FBUyxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLEdBQVMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQVMsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQVMsU0FBUyxDQUFDO1FBRWpDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLGdDQUFjLENBQ1osSUFBSSxFQUNKLElBQUksQ0FBQyxhQUFhLEVBQ2xCLENBQUMsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUNwRixDQUFDO1FBQ0osQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWtCO1FBQ2hDLE1BQU0sZUFBZSxHQUEwQjtZQUM3QyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsa0JBQWtCO1lBQzlDLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FB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cmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluY2lkZW50IH0gZnJvbSBcImluY2lkZW50XCI7XG5pbXBvcnQgeyBsYXp5UHJvcGVydGllcyB9IGZyb20gXCIuLi9faGVscGVycy9sYXp5LXByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtdHlwZVwiO1xuaW1wb3J0IHsgY3JlYXRlTGF6eU9wdGlvbnNFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbGF6eS1vcHRpb25zXCI7XG5pbXBvcnQgeyBjcmVhdGVMb3dlckNhc2VFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbG93ZXItY2FzZVwiO1xuaW1wb3J0IHsgY3JlYXRlTWF4VWNzMlN0cmluZ0xlbmd0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9tYXgtdWNzMi1zdHJpbmctbGVuZ3RoXCI7XG5pbXBvcnQgeyBjcmVhdGVNaW5VY3MyU3RyaW5nTGVuZ3RoRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL21pbi11Y3MyLXN0cmluZy1sZW5ndGhcIjtcbmltcG9ydCB7IGNyZWF0ZU5vdFRyaW1tZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbm90LXRyaW1tZWRcIjtcbmltcG9ydCB7IGNyZWF0ZVBhdHRlcm5Ob3RNYXRjaGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL3BhdHRlcm4tbm90LW1hdGNoZWRcIjtcbmltcG9ydCB7IExhenksIFZlcnNpb25lZFR5cGUgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgTmFtZSA9IFwidWNzMi1zdHJpbmdcIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJ1Y3MyLXN0cmluZ1wiO1xuZXhwb3J0IG5hbWVzcGFjZSBqc29uIHtcbiAgZXhwb3J0IHR5cGUgSW5wdXQgPSBzdHJpbmc7XG4gIGV4cG9ydCB0eXBlIE91dHB1dCA9IHN0cmluZztcblxuICBleHBvcnQgaW50ZXJmYWNlIFR5cGUge1xuICAgIG5hbWU6IE5hbWU7XG4gICAgYWxsb3dVbmljb2RlUmVnRXhwOiBib29sZWFuO1xuICAgIHBhdHRlcm4/OiBbc3RyaW5nLCBzdHJpbmddO1xuICAgIGxvd2VyQ2FzZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAc2VlIFtbVWNzMlN0cmluZ1R5cGVPcHRpb25zLnRyaW1tZWRdXVxuICAgICAqL1xuICAgIHRyaW1tZWQ6IGJvb2xlYW47XG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAgIG1heExlbmd0aDogbnVtYmVyO1xuICB9XG59XG5leHBvcnQgdHlwZSBEaWZmID0gW3N0cmluZywgc3RyaW5nXTtcblxuZXhwb3J0IGludGVyZmFjZSBVY3MyU3RyaW5nVHlwZU9wdGlvbnMge1xuICBhbGxvd1VuaWNvZGVSZWdFeHA/OiBib29sZWFuO1xuICBwYXR0ZXJuPzogUmVnRXhwO1xuICBsb3dlckNhc2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RyaW5nIGNhbm5vdCBzdGFydCBvciBlbmQgd2l0aCBhbnkgb2YgdGhlIGZvbGxvd2luZyB3aGl0ZXNwYWNlIGFuZCBsaW5lIHRlcm1pbmF0b3JcbiAgICogY2hhcmFjdGVyczpcbiAgICpcbiAgICogLSBVbmljb2RlIENoYXJhY3RlciAnQ0hBUkFDVEVSIFRBQlVMQVRJT04nIChVKzAwMDkpXG4gICAqIC0gVW5pY29kZSBDaGFyYWN0ZXIgJ0xJTkUgRkVFRCAoTEYpJyAoVSswMDBBKVxuICAgKiAtIFVuaWNvZGUgQ2hhcmFjdGVyICdMSU5FIFRBQlVMQVRJT04nIChVKzAwMEIpXG4gICAqIC0gVW5pY29kZSBDaGFyYWN0ZXIgJ0ZPUk0gRkVFRCAoRkYpJyAoVSswMDBDKVxuICAgKiAtIFVuaWNvZGUgQ2hhcmFjdGVyICdDQVJSSUFHRSBSRVRVUk4gKENSKScgKFUrMDAwRClcbiAgICogLSBVbmljb2RlIENoYXJhY3RlciAnU1BBQ0UnIChVKzAwMjApXG4gICAqIC0gVW5pY29kZSBDaGFyYWN0ZXIgJ05PLUJSRUFLIFNQQUNFJyAoVSswMEEwKVxuICAgKiAtIFVuaWNvZGUgQ2hhcmFjdGVyICdMSU5FIFNFUEFSQVRPUicgKFUrMjAyOClcbiAgICogLSBVbmljb2RlIENoYXJhY3RlciAnUEFSQUdSQVBIIFNFUEFSQVRPUicgKFUrMjAyOSlcbiAgICogLSBVbmljb2RlIENoYXJhY3RlciAnWkVSTyBXSURUSCBOTy1CUkVBSyBTUEFDRScgKFUrRkVGRilcbiAgICogLSBBbnkgb3RoZXIgVW5pY29kZSBjaGFyYWN0ZXIgb2YgdGhlIFwiU2VwYXJhdG9yLCBzcGFjZVwiIChacykgZ2VuZXJhbCBjYXRlZ29yeVxuICAgKlxuICAgKiBAc2VlIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvVHJpbT5cbiAgICogQHNlZSA8aHR0cDovL3d3dy5maWxlZm9ybWF0LmluZm8vaW5mby91bmljb2RlL2NhdGVnb3J5L1pzL2xpc3QuaHRtPlxuICAgKi9cbiAgdHJpbW1lZD86IGJvb2xlYW47XG4gIG1pbkxlbmd0aD86IG51bWJlcjtcbiAgbWF4TGVuZ3RoOiBudW1iZXI7XG59XG5cbi8qKlxuICogVGhlIHR5cGUgdXNlZCBmb3Igc2ltcGxlIEphdmFzY3JpcHQgc3RyaW5ncy5cbiAqIEphdmFzY3JpcHQgc3RyaW5ncyBleHBvc2UgY2hhcmFjdGVycyBhcyBVQ1MyIGNvZGUgdW5pdHMuIFRoaXMgaXMgYSBmaXhlZC1zaXplIGVuY29kaW5nIHRoYXQgc3VwcG9ydHMgdGhlIHVuaWNvZGVcbiAqIGNvZGVwb2ludHMgZnJvbSBVKzAwMDAwMCB0byBVKzAwRkZGRiAoQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIG9yIEJNUCkuIERpc3BsYXlpbmcgbGFyZ2VyIGNvZGVwb2ludHMgaXNcbiAqIGEgcHJvcGVydHkgb2YgdGhlIGVudmlyb25tZW50IGJhc2VkIG9uIFVURi0xNiBzdXJyb2dhdGUgcGFpcnMuIFVuaWNvZGUgZG9lcyBub3QsIGFuZCB3aWxsIG5ldmVyLCBhc3NpZ25cbiAqIGNoYXJhY3RlcnMgdG8gdGhlIGNvZGVwb2ludHMgZnJvbSBVK09PRDgwMCB0byBVKzAwREZGRi4gVGhlc2Ugc3BhcmUgY29kZXBvaW50cyBhbGxvd3MgVVRGMTYgdG8gY29tYmluZVxuICogY29kZXVuaXRzIGZyb20gMHhkODAwIHRvIDB4ZGZmZiBpbiBwYWlycyAoY2FsbGVkIHN1cnJvZ2F0ZSBwYWlycykgdG8gcmVwcmVzZW50IGNvZGVwb2ludHMgZnJvbSBzdXBwbGVtZW50YXJ5IHBsYW5lcy5cbiAqIFRoaXMgdHJhbnNmb3JtYXRpb24gaGFwcGVucyBkdXJpbmcgdGhlIHRyYW5zaXRpb24gZnJvbSBjb2RldW5pdHMgdG8gY29kZXBvaW50cyBpbiBVVEYtMTYuXG4gKiBJbiBVQ1MyLCB0aGUgY29kZXVuaXRzIGZyb20gMHhkODAwIHRvIDB4ZGZmZiBkaXJlY3RseSBwcm9kdWNlIGNvZGVwb2ludHMgaW4gdGhlIHJhbmdlIGZyb20gVStPT0Q4T08gdG9cbiAqIFUrT09ERkYuIFRoZW4sIHRoZSBkaXNwbGF5IG1pZ2h0IG1lcmdlIHRoZXNlIGNvZGVwb2ludHMgaW50byBoaWdoZXIgY29kZXBvaW50cyBkdXJpbmcgdGhlIHJlbmRlcmluZy5cbiAqXG4gKlxuICogTGV0cyB0YWtlIGFuIGV4YW1wbGUgKGFsbCB0aGUgbnVtYmVycyBhcmUgaW4gaGV4YWRlY2ltYWwpOlxuICpcbiAqIGBgYFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICstLS0rLS0tKy0tLSstLS0rLS0tKy0tLStcbiAqIEJ5dGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDAwfCA0MXwgZDh8IDM0fCBkZHwgMWV8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLSstLS0rLS0tKy0tLSstLS0rLS0tK1xuICogVVRGLTE2QkUgY29kZXVuaXRzICAgICAgICAgICAgICAgICAgICAgIHwgMHgwMDQxfCAweGQ4MzR8IDB4ZGQxZXxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0tKy0tLS0tLS0rXG4gKiBDb2RlcG9pbnRzIChmcm9tIFVURi0xNkJFKSAgICAgICAgICAgICAgfCAgVSs0MSB8ICAgVSswMUQxMUUgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tKy0tLS0tLS0tLS0tLS0tLStcbiAqIERpc3BsYXllZCAoZnJvbSBVVEYtMTZCRSkgICAgICAgICAgICAgICB8ICAgQSAgIHwgICAgICAg8J2EniAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0rLS0tLS0tLSstLS0tLS0tK1xuICogVUNTMiBjb2RldW5pdHMgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMHgwMDQxfCAweGQ4MzR8IDB4ZGQxZXxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0tKy0tLS0tLS0rXG4gKiBDb2RlcG9pbnRzIChmcm9tIFVDUzJCRSkgICAgICAgICAgICAgICAgfCAgVSs0MSB8IFUrRDgzNHwgVStERDFFfCAgPC0gVGhpcyBpcyB3aGF0IEphdmFzY3JpcHQgc2Vlc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tKy0tLS0tLS0rLS0tLS0tLStcbiAqIERpc3BsYXllZCAoZnJvbSBVQ1MyQkUpICAgICAgICAgICAgICAgICB8ICAgQSAgIHwgICDvv70gICB8ICAg77+9ICAgfCAgPC0gVGhpcyBpcyB3aGF0IHRoZSB1c2VyIG1heSBzZWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0tKy0tLS0tLS0rXG4gKiBEaXNwbGF5ZWQgKGZyb20gVUNTMkJFIHdpdGggc3Vycm9nYXRlcykgfCAgIEEgICB8ICAgICAgIPCdhJ4gICAgICAgfCAgPC0gVGhpcyBpcyB3aGF0IHRoZSB1c2VyIG1heSBzZWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0rXG4gKiBgYGBcbiAqXG4gKiBUaGUgbW9zdCBpbXBvcnRhbnQgdGFrZWF3YXkgaXMgdGhhdCBjb2RlcG9pbnRzIG91dHNpZGUgb2YgdGhlIEJNUCBhcmUgYSBwcm9wZXJ0eSBvZiB0aGUgZGlzcGxheSwgbm90IG9mXG4gKiB0aGUgSmF2YXNjcmlwdCBzdHJpbmcuXG4gKiBUaGlzIGlzIHRoZSBjYXVzZSBvZiBtdWx0aXBsZSBpc3N1ZXMuXG4gKiAtIFN1cnJvZ2F0ZSBoYWx2ZXMgYXJlIGV4cG9zZWQgYXMgZGlzdGluY3QgY2hhcmFjdGVyczogYFwi8J2EnlwiLmxlbmd0aCA9PT0gMmBcbiAqIC0gVW5tYXRjaGVkIHN1cnJvZ2F0ZSBoYWx2ZXMgYXJlIGFsbG93ZWQ6IGBcIlxcdWQ4MzRcImBcbiAqIC0gU3Vycm9nYXRlIHBhaXJzIGluIHRoZSB3cm9uZyBvcmRlciBhcmUgYWxsb3dlZDogYFwiXFx1ZGQxZVxcdWQ4MzRcImBcbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IHRoZSBmdWxsIHVuaWNvZGUgcmFuZ2UgYnkgbWFuaXB1bGF0aW5nIGNvZGVwb2ludHMgaW5zdGVhZCBvZiBVQ1MyIGNoYXJhY3RlciBjb2RlcywgeW91IG1heVxuICogd2FudCB0byB1c2UgQ29kZXBvaW50U3RyaW5nIG9yIENvZGVwb2ludEFycmF5IGluc3RlYWQgb2YgVWNzMlN0cmluZy5cbiAqXG4gKiBQUzogVGhpcyB0eXBlIGRvZXMgbm90IGRlYWwgd2l0aCBVbmljZG9lIG5vcm1hbGl6YXRpb24gZWl0aGVyLiBVc2UgQ29kZXBvaW50U3RyaW5nIGFuZCBDb2RlcG9pbnRBcnJheSBpZiB5b3UgbmVlZFxuICogaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBVY3MyU3RyaW5nVHlwZSBpbXBsZW1lbnRzIFZlcnNpb25lZFR5cGU8c3RyaW5nLCBqc29uLklucHV0LCBqc29uLk91dHB1dCwgRGlmZj4ge1xuICByZWFkb25seSBuYW1lOiBOYW1lID0gbmFtZTtcbiAgcmVhZG9ubHkgYWxsb3dVbmljb2RlUmVnRXhwOiBib29sZWFuO1xuICByZWFkb25seSBwYXR0ZXJuPzogUmVnRXhwO1xuICByZWFkb25seSBsb3dlckNhc2U6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHRyaW1tZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG1pbkxlbmd0aD86IG51bWJlcjtcbiAgcmVhZG9ubHkgbWF4TGVuZ3RoOiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBfb3B0aW9uczogTGF6eTxVY3MyU3RyaW5nVHlwZU9wdGlvbnM+O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IExhenk8VWNzMlN0cmluZ1R5cGVPcHRpb25zPikge1xuICAgIC8vIFRPRE86IFJlbW92ZSBvbmNlIFRTIDIuNyBpcyBiZXR0ZXIgc3VwcG9ydGVkIGJ5IGVkaXRvcnNcbiAgICB0aGlzLmFsbG93VW5pY29kZVJlZ0V4cCA9IDxhbnk+IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxvd2VyQ2FzZSA9IDxhbnk+IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRyaW1tZWQgPSA8YW55PiB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXhMZW5ndGggPSA8YW55PiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5fYXBwbHlPcHRpb25zKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhenlQcm9wZXJ0aWVzKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLl9hcHBseU9wdGlvbnMsXG4gICAgICAgIFtcImFsbG93VW5pY29kZVJlZ0V4cFwiLCBcInBhdHRlcm5cIiwgXCJsb3dlckNhc2VcIiwgXCJ0cmltbWVkXCIsIFwibWluTGVuZ3RoXCIsIFwibWF4TGVuZ3RoXCJdLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04ob3B0aW9uczoganNvbi5UeXBlKTogVWNzMlN0cmluZ1R5cGUge1xuICAgIGNvbnN0IHJlc29sdmVkT3B0aW9uczogVWNzMlN0cmluZ1R5cGVPcHRpb25zID0ge1xuICAgICAgYWxsb3dVbmljb2RlUmVnRXhwOiBvcHRpb25zLmFsbG93VW5pY29kZVJlZ0V4cCxcbiAgICAgIGxvd2VyQ2FzZTogb3B0aW9ucy5sb3dlckNhc2UsXG4gICAgICB0cmltbWVkOiBvcHRpb25zLnRyaW1tZWQsXG4gICAgICBtYXhMZW5ndGg6IG9wdGlvbnMubWF4TGVuZ3RoLFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMucGF0dGVybiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNvbHZlZE9wdGlvbnMucGF0dGVybiA9IG5ldyBSZWdFeHAob3B0aW9ucy5wYXR0ZXJuWzBdLCBvcHRpb25zLnBhdHRlcm5bMV0pO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5taW5MZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzb2x2ZWRPcHRpb25zLm1pbkxlbmd0aCA9IG9wdGlvbnMubWluTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVjczJTdHJpbmdUeXBlKHJlc29sdmVkT3B0aW9ucyk7XG4gIH1cblxuICB0b0pTT04oKToganNvbi5UeXBlIHtcbiAgICBjb25zdCBqc29uVHlwZToganNvbi5UeXBlID0ge1xuICAgICAgbmFtZSxcbiAgICAgIGFsbG93VW5pY29kZVJlZ0V4cDogdGhpcy5hbGxvd1VuaWNvZGVSZWdFeHAsXG4gICAgICBsb3dlckNhc2U6IHRoaXMubG93ZXJDYXNlLFxuICAgICAgdHJpbW1lZDogdGhpcy50cmltbWVkLFxuICAgICAgbWF4TGVuZ3RoOiB0aGlzLm1heExlbmd0aCxcbiAgICB9O1xuICAgIGlmICh0aGlzLnBhdHRlcm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAganNvblR5cGUucGF0dGVybiA9IFt0aGlzLnBhdHRlcm4uc291cmNlLCB0aGlzLnBhdHRlcm4uZmxhZ3NdO1xuICAgIH1cbiAgICBpZiAodGhpcy5taW5MZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAganNvblR5cGUubWluTGVuZ3RoID0gdGhpcy5taW5MZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBqc29uVHlwZTtcbiAgfVxuXG4gIHJlYWRUcnVzdGVkSnNvbihpbnB1dDoganNvbi5PdXRwdXQpOiBzdHJpbmcge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJlYWRKc29uKGlucHV0OiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IHRoaXMudGVzdEVycm9yKGlucHV0KTtcbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHdyaXRlSnNvbih2YWw6IHN0cmluZyk6IGpzb24uT3V0cHV0IHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgdGVzdEVycm9yKHZhbDogc3RyaW5nKTogRXJyb3IgfCB1bmRlZmluZWQge1xuICAgIGlmICh0eXBlb2YgdmFsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSW52YWxpZFR5cGVFcnJvcihcInN0cmluZ1wiLCB2YWwpO1xuICAgIH1cbiAgICBpZiAodGhpcy5sb3dlckNhc2UgJiYgdmFsLnRvTG93ZXJDYXNlKCkgIT09IHZhbCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUxvd2VyQ2FzZUVycm9yKHZhbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRyaW1tZWQgJiYgdmFsLnRyaW0oKSAhPT0gdmFsKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTm90VHJpbW1lZEVycm9yKHZhbCk7XG4gICAgfVxuICAgIGNvbnN0IHN0ckxlbjogbnVtYmVyID0gdmFsLmxlbmd0aDtcbiAgICBjb25zdCBtaW5MZW5ndGg6IG51bWJlciB8IHVuZGVmaW5lZCA9IHRoaXMubWluTGVuZ3RoO1xuICAgIGlmIChtaW5MZW5ndGggIT09IHVuZGVmaW5lZCAmJiBzdHJMZW4gPCBtaW5MZW5ndGgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVNaW5VY3MyU3RyaW5nTGVuZ3RoRXJyb3IodmFsLCBtaW5MZW5ndGgpO1xuICAgIH1cbiAgICBpZiAoc3RyTGVuID4gdGhpcy5tYXhMZW5ndGgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVNYXhVY3MyU3RyaW5nTGVuZ3RoRXJyb3IodmFsLCB0aGlzLm1heExlbmd0aCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgaWYgKHRoaXMucGF0dGVybi51bmljb2RlICYmICF0aGlzLmFsbG93VW5pY29kZVJlZ0V4cCkge1xuICAgICAgICB0aHJvdyBuZXcgSW5jaWRlbnQoXG4gICAgICAgICAgXCJVbmljb2RlUmVnRXhwXCIsXG4gICAgICAgICAgXCJEaXNhbGxvd2VkIHVuaWNvZGUgUmVnRXhwLCB1c2UgYGFsbG93VW5pY29kZVJlZ0V4cGAgb3IgYENvZGVwb2ludFN0cmluZ1R5cGVgXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXR0ZXJuLnRlc3QodmFsKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUGF0dGVybk5vdE1hdGNoZWRFcnJvcih0aGlzLnBhdHRlcm4sIHZhbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHRlc3QodmFsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0RXJyb3IodmFsKSA9PT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZXF1YWxzKHZhbDE6IHN0cmluZywgdmFsMjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbDEgPT09IHZhbDI7XG4gIH1cblxuICBjbG9uZSh2YWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGRpZmYob2xkVmFsOiBzdHJpbmcsIG5ld1ZhbDogc3RyaW5nKTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIG9sZFZhbCA9PT0gbmV3VmFsID8gdW5kZWZpbmVkIDogW29sZFZhbCwgbmV3VmFsXTtcbiAgfVxuXG4gIHBhdGNoKG9sZFZhbDogc3RyaW5nLCBkaWZmOiBEaWZmIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZGlmZiA9PT0gdW5kZWZpbmVkID8gb2xkVmFsIDogZGlmZlsxXTtcbiAgfVxuXG4gIHJldmVyc2VEaWZmKGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gZGlmZiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogW2RpZmZbMV0sIGRpZmZbMF1dO1xuICB9XG5cbiAgc3F1YXNoKGRpZmYxOiBEaWZmIHwgdW5kZWZpbmVkLCBkaWZmMjogRGlmZiB8IHVuZGVmaW5lZCk6IERpZmYgfCB1bmRlZmluZWQge1xuICAgIGlmIChkaWZmMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGlmZjIgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFtkaWZmMlswXSwgZGlmZjJbMV1dO1xuICAgIH0gZWxzZSBpZiAoZGlmZjIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFtkaWZmMVswXSwgZGlmZjFbMV1dO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZjFbMF0gPT09IGRpZmYyWzFdID8gdW5kZWZpbmVkIDogW2RpZmYxWzBdLCBkaWZmMlsxXV07XG4gIH1cblxuICBwcml2YXRlIF9hcHBseU9wdGlvbnMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY3JlYXRlTGF6eU9wdGlvbnNFcnJvcih0aGlzKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9uczogVWNzMlN0cmluZ1R5cGVPcHRpb25zID0gdHlwZW9mIHRoaXMuX29wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuX29wdGlvbnMoKSA6IHRoaXMuX29wdGlvbnM7XG5cbiAgICBjb25zdCBhbGxvd1VuaWNvZGVSZWdFeHA6IGJvb2xlYW4gPSBvcHRpb25zLmFsbG93VW5pY29kZVJlZ0V4cCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5hbGxvd1VuaWNvZGVSZWdFeHAgOiB0cnVlO1xuICAgIGNvbnN0IHBhdHRlcm46IFJlZ0V4cCB8IHVuZGVmaW5lZCA9IG9wdGlvbnMucGF0dGVybjtcbiAgICBjb25zdCBsb3dlckNhc2U6IGJvb2xlYW4gPSBvcHRpb25zLmxvd2VyQ2FzZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5sb3dlckNhc2UgOiBmYWxzZTtcbiAgICBjb25zdCB0cmltbWVkOiBib29sZWFuID0gb3B0aW9ucy50cmltbWVkICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRyaW1tZWQgOiBmYWxzZTtcbiAgICBjb25zdCBtaW5MZW5ndGg6IG51bWJlciB8IHVuZGVmaW5lZCA9IG9wdGlvbnMubWluTGVuZ3RoO1xuICAgIGNvbnN0IG1heExlbmd0aDogbnVtYmVyID0gb3B0aW9ucy5tYXhMZW5ndGg7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHthbGxvd1VuaWNvZGVSZWdFeHAsIHBhdHRlcm4sIGxvd2VyQ2FzZSwgdHJpbW1lZCwgbWluTGVuZ3RoLCBtYXhMZW5ndGh9KTtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

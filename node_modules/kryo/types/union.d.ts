import { Lazy, Serializer, Type, VersionedType } from "../types";
export declare type Name = "union";
export declare const name: Name;
export declare namespace json {
    type Input = any;
    type Output = any;
    type Type = undefined;
}
export declare type Diff = any;
export declare type Matcher<T> = (value: T) => Type<T> | undefined;
export declare type TrustedMatcher<T> = (value: T) => Type<T>;
export declare type ReadMatcher<T> = (input: any, serializer: Serializer) => Type<T> | undefined;
export declare type ReadTrustedMatcher<T> = (input: any, serializer: Serializer) => Type<T>;
export interface UnionTypeOptions<T, Output, Input extends Output, Diff> {
    variants: VersionedType<T, Output, Input, Diff>[];
    matcher: Matcher<T>;
    trustedMatcher?: TrustedMatcher<T>;
    readMatcher: ReadMatcher<T>;
    readTrustedMatcher?: ReadTrustedMatcher<T>;
}
export declare type TestWithVariantResult<T> = [true, VersionedType<T, any, any, any>] | [false, VersionedType<T, any, any, any> | undefined];
export declare class UnionType<T> implements VersionedType<T, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly variants: VersionedType<T, any, any, Diff>[];
    readonly matcher: Matcher<T>;
    readonly trustedMatcher: TrustedMatcher<T>;
    readonly readMatcher: ReadMatcher<T>;
    readonly readTrustedMatcher: ReadTrustedMatcher<T>;
    private _options?;
    constructor(options: Lazy<UnionTypeOptions<T, any, any, any>>);
    toJSON(): json.Type;
    readTrustedJsonWithVariant(input: json.Output): [T, Type<T>];
    readJsonWithVariant(input: any): [T, Type<T>];
    readTrustedJson(input: json.Output): T;
    readJson(input: any): T;
    writeJson(val: T): json.Output;
    testError(val: T): Error | undefined;
    testWithVariant(val: T): TestWithVariantResult<T>;
    test(val: T): boolean;
    equals(val1: T, val2: T): boolean;
    clone(val: T): T;
    diff(oldVal: T, newVal: T): Diff | undefined;
    patch(oldVal: T, diff: Diff | undefined): T;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

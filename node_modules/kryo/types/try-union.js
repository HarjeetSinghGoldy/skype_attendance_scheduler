"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
const not_implemented_1 = require("../errors/not-implemented");
const union = __importStar(require("./union"));
exports.name = "try-union";
function toUnionOptions(options) {
    const variants = options.variants;
    const matcher = (value) => {
        for (const variant of variants) {
            if (variant.test(value)) {
                return variant;
            }
        }
        return undefined;
    };
    const readMatcher = (input, serializer) => {
        for (const variant of variants) {
            try {
                serializer.read(variant, input);
                return variant;
            }
            catch (err) {
                // Ignore error and try next variant
            }
        }
        return undefined;
    };
    return { variants: options.variants, matcher, readMatcher };
}
class TryUnionType extends union.UnionType {
    constructor(options) {
        super(typeof options === "function" ? () => toUnionOptions(options()) : toUnionOptions(options));
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("TryUnionType#toJSON");
    }
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("TryUnionType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("TryUnionType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("TryUnionType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("TryUnionType#squash");
    }
}
exports.TryUnionType = TryUnionType;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzL3RyeS11bmlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwrREFBMkY7QUFFM0YsK0NBQWlDO0FBR3BCLFFBQUEsSUFBSSxHQUFTLFdBQVcsQ0FBQztBQWtCdEMsd0JBQTJCLE9BQThDO0lBQ3ZFLE1BQU0sUUFBUSxHQUF1QyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RFLE1BQU0sT0FBTyxHQUFxQixDQUFDLEtBQVUsRUFBRSxFQUFFO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDakIsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUF5QixDQUFDLEtBQVUsRUFBRSxVQUFzQixFQUFFLEVBQUU7UUFDL0UsR0FBRyxDQUFDLENBQUMsTUFBTSxPQUFPLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUM7Z0JBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDakIsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2Isb0NBQW9DO1lBQ3RDLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQixDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsRUFBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELGtCQUF3QyxTQUFRLEtBQUssQ0FBQyxTQUFZO0lBQ2hFLFlBQVksT0FBb0Q7UUFDOUQsS0FBSyxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSwyQ0FBeUIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxJQUFJLENBQUMsTUFBUyxFQUFFLE1BQVM7UUFDdkIsTUFBTSwyQ0FBeUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxLQUFLLENBQUMsTUFBUyxFQUFFLElBQXNCO1FBQ3JDLE1BQU0sMkNBQXlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsV0FBVyxDQUFDLElBQXNCO1FBQ2hDLE1BQU0sMkNBQXlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQXVCLEVBQUUsS0FBdUI7UUFDckQsTUFBTSwyQ0FBeUIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQXhCRCxvQ0F3QkMiLCJmaWxlIjoidHlwZXMvdHJ5LXVuaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvciwgTm90SW1wbGVtZW50ZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvbm90LWltcGxlbWVudGVkXCI7XG5pbXBvcnQgeyBMYXp5LCBTZXJpYWxpemVyLCBWZXJzaW9uZWRUeXBlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgKiBhcyB1bmlvbiBmcm9tIFwiLi91bmlvblwiO1xuXG5leHBvcnQgdHlwZSBOYW1lID0gXCJ0cnktdW5pb25cIjtcbmV4cG9ydCBjb25zdCBuYW1lOiBOYW1lID0gXCJ0cnktdW5pb25cIjtcbmV4cG9ydCBuYW1lc3BhY2UganNvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXQge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH1cblxuICBleHBvcnQgdHlwZSBUeXBlID0gdW5kZWZpbmVkO1xufVxuZXhwb3J0IHR5cGUgRGlmZiA9IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBUcnlVbmlvblR5cGVPcHRpb25zPFQsIE91dHB1dCwgSW5wdXQgZXh0ZW5kcyBPdXRwdXQsIERpZmY+IHtcbiAgdmFyaWFudHM6IFZlcnNpb25lZFR5cGU8VCwgYW55LCBhbnksIERpZmY+W107XG59XG5cbmZ1bmN0aW9uIHRvVW5pb25PcHRpb25zPFQ+KG9wdGlvbnM6IFRyeVVuaW9uVHlwZU9wdGlvbnM8VCwgYW55LCBhbnksIGFueT4pOiB1bmlvbi5VbmlvblR5cGVPcHRpb25zPFQsIGFueSwgYW55LCBhbnk+IHtcbiAgY29uc3QgdmFyaWFudHM6IFZlcnNpb25lZFR5cGU8VCwgYW55LCBhbnksIERpZmY+W10gPSBvcHRpb25zLnZhcmlhbnRzO1xuICBjb25zdCBtYXRjaGVyOiB1bmlvbi5NYXRjaGVyPFQ+ID0gKHZhbHVlOiBhbnkpID0+IHtcbiAgICBmb3IgKGNvbnN0IHZhcmlhbnQgb2YgdmFyaWFudHMpIHtcbiAgICAgIGlmICh2YXJpYW50LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YXJpYW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuICBjb25zdCByZWFkTWF0Y2hlcjogdW5pb24uUmVhZE1hdGNoZXI8VD4gPSAoaW5wdXQ6IGFueSwgc2VyaWFsaXplcjogU2VyaWFsaXplcikgPT4ge1xuICAgIGZvciAoY29uc3QgdmFyaWFudCBvZiB2YXJpYW50cykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VyaWFsaXplci5yZWFkKHZhcmlhbnQsIGlucHV0KTtcbiAgICAgICAgcmV0dXJuIHZhcmlhbnQ7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gSWdub3JlIGVycm9yIGFuZCB0cnkgbmV4dCB2YXJpYW50XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG4gIHJldHVybiB7dmFyaWFudHM6IG9wdGlvbnMudmFyaWFudHMsIG1hdGNoZXIsIHJlYWRNYXRjaGVyfTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyeVVuaW9uVHlwZTxUIGV4dGVuZHMge30+IGV4dGVuZHMgdW5pb24uVW5pb25UeXBlPFQ+IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczogTGF6eTxUcnlVbmlvblR5cGVPcHRpb25zPFQsIGFueSwgYW55LCBhbnk+Pikge1xuICAgIHN1cGVyKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIgPyAoKSA9PiB0b1VuaW9uT3B0aW9ucyhvcHRpb25zKCkpIDogdG9Vbmlvbk9wdGlvbnMob3B0aW9ucykpO1xuICB9XG5cbiAgdG9KU09OKCk6IGpzb24uVHlwZSB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIlRyeVVuaW9uVHlwZSN0b0pTT05cIik7XG4gIH1cblxuICBkaWZmKG9sZFZhbDogVCwgbmV3VmFsOiBUKTogRGlmZiB8IHVuZGVmaW5lZCB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIlRyeVVuaW9uVHlwZSNkaWZmXCIpO1xuICB9XG5cbiAgcGF0Y2gob2xkVmFsOiBULCBkaWZmOiBEaWZmIHwgdW5kZWZpbmVkKTogVCB7XG4gICAgdGhyb3cgY3JlYXRlTm90SW1wbGVtZW50ZWRFcnJvcihcIlRyeVVuaW9uVHlwZSNwYXRjaFwiKTtcbiAgfVxuXG4gIHJldmVyc2VEaWZmKGRpZmY6IERpZmYgfCB1bmRlZmluZWQpOiBEaWZmIHwgdW5kZWZpbmVkIHtcbiAgICB0aHJvdyBjcmVhdGVOb3RJbXBsZW1lbnRlZEVycm9yKFwiVHJ5VW5pb25UeXBlI3JldmVyc2VEaWZmXCIpO1xuICB9XG5cbiAgc3F1YXNoKGRpZmYxOiBEaWZmIHwgdW5kZWZpbmVkLCBkaWZmMjogRGlmZiB8IHVuZGVmaW5lZCk6IERpZmYgfCB1bmRlZmluZWQge1xuICAgIHRocm93IGNyZWF0ZU5vdEltcGxlbWVudGVkRXJyb3IoXCJUcnlVbmlvblR5cGUjc3F1YXNoXCIpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=

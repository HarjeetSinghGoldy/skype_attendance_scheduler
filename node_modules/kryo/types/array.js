"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_array_items_1 = require("../errors/invalid-array-items");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
const max_array_length_1 = require("../errors/max-array-length");
const not_implemented_1 = require("../errors/not-implemented");
const json_1 = require("../json");
exports.name = "array";
// tslint:disable-next-line:variable-name
exports.ArrayType = class {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.itemType = undefined;
        this.maxLength = undefined;
        this._options = options;
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["itemType", "maxLength"]);
        }
    }
    toJSON() {
        throw not_implemented_1.createNotImplementedError("ArrayType#toJSON");
    }
    readTrustedJson(input) {
        return input.map((item) => json_1.JSON_SERIALIZER.readTrusted(this.itemType, item));
    }
    readJson(input) {
        if (!Array.isArray(input)) {
            throw invalid_type_1.createInvalidTypeError("array", input);
        }
        if (this.maxLength !== undefined && input.length > this.maxLength) {
            throw max_array_length_1.createMaxArrayLengthError(input, this.maxLength);
        }
        let invalid = undefined;
        const result = [];
        const itemCount = input.length;
        for (let i = 0; i < itemCount; i++) {
            try {
                const item = json_1.JSON_SERIALIZER.read(this.itemType, input[i]);
                if (invalid === undefined) {
                    result.push(item);
                }
            }
            catch (err) {
                if (invalid === undefined) {
                    invalid = new Map();
                }
                invalid.set(i, err);
            }
        }
        if (invalid !== undefined) {
            throw invalid_array_items_1.createInvalidArrayItemsError(invalid);
        }
        return result;
    }
    writeJson(val) {
        return val.map((item) => json_1.JSON_SERIALIZER.write(this.itemType, item));
    }
    testError(val) {
        if (!Array.isArray(val)) {
            return invalid_type_1.createInvalidTypeError("array", val);
        }
        if (this.maxLength !== undefined && val.length > this.maxLength) {
            return max_array_length_1.createMaxArrayLengthError(val, this.maxLength);
        }
        const invalid = new Map();
        const itemCount = val.length;
        for (let i = 0; i < itemCount; i++) {
            const error = this.itemType.testError(val[i]);
            if (error !== undefined) {
                invalid.set(i, error);
            }
        }
        if (invalid.size !== 0) {
            return invalid_array_items_1.createInvalidArrayItemsError(invalid);
        }
        return undefined;
    }
    test(val) {
        if (!Array.isArray(val) || (this.maxLength !== undefined && val.length > this.maxLength)) {
            return false;
        }
        for (const item of val) {
            if (!this.itemType.test(item)) {
                return false;
            }
        }
        return true;
    }
    equals(val1, val2) {
        if (val2.length !== val1.length) {
            return false;
        }
        for (let i = 0; i < val1.length; i++) {
            if (!this.itemType.equals(val2[i], val1[i])) {
                return false;
            }
        }
        return true;
    }
    clone(val) {
        return val.map((item) => this.itemType.clone(item));
    }
    /**
     * @param oldVal
     * @param newVal
     * @returns `true` if there is a difference, `undefined` otherwise
     */
    diff(oldVal, newVal) {
        throw not_implemented_1.createNotImplementedError("ArrayType#diff");
    }
    patch(oldVal, diff) {
        throw not_implemented_1.createNotImplementedError("ArrayType#patch");
    }
    reverseDiff(diff) {
        throw not_implemented_1.createNotImplementedError("ArrayType#reverseDiff");
    }
    squash(diff1, diff2) {
        throw not_implemented_1.createNotImplementedError("ArrayType#squash");
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const itemType = options.itemType;
        const maxLength = options.maxLength;
        Object.assign(this, { itemType, maxLength });
        Object.freeze(this);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,

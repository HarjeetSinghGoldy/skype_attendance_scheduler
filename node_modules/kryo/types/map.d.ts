import { Lazy, VersionedType } from "../types";
export declare type Name = "map";
export declare const name: Name;
export declare namespace json {
    interface Input {
        [key: string]: any;
    }
    interface Output {
        [key: string]: any;
    }
    type Type = undefined;
}
export declare type Diff = any;
export interface MapTypeOptions<K, V> {
    keyType: VersionedType<K, any, any, any>;
    valueType: VersionedType<V, any, any, any>;
    maxSize: number;
    assumeStringKey?: boolean;
}
export declare class MapType<K, V> implements VersionedType<Map<K, V>, json.Input, json.Output, Diff> {
    readonly name: Name;
    readonly keyType: VersionedType<K, any, any, any>;
    readonly valueType: VersionedType<V, any, any, any>;
    readonly maxSize: number;
    readonly assumeStringKey: boolean;
    private _options;
    constructor(options: Lazy<MapTypeOptions<K, V>>);
    toJSON(): json.Type;
    readTrustedJson(input: json.Output): Map<K, V>;
    readJson(input: any): Map<K, V>;
    writeJson(val: Map<K, V>): json.Output;
    testError(val: Map<K, V>): Error | undefined;
    test(val: Map<K, V>): boolean;
    equals(val1: Map<K, V>, val2: Map<K, V>): boolean;
    clone(val: Map<K, V>): Map<K, V>;
    diff(oldVal: Map<K, V>, newVal: Map<K, V>): Diff | undefined;
    patch(oldVal: Map<K, V>, diff: Diff | undefined): Map<K, V>;
    reverseDiff(diff: Diff | undefined): Diff | undefined;
    squash(diff1: Diff | undefined, diff2: Diff | undefined): Diff | undefined;
    private _applyOptions();
}

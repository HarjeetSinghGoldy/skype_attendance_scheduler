"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lazy_properties_1 = require("../_helpers/lazy-properties");
const invalid_float64_1 = require("../errors/invalid-float64");
const invalid_type_1 = require("../errors/invalid-type");
const lazy_options_1 = require("../errors/lazy-options");
exports.name = "float64";
// tslint:disable:max-line-length
class Float64Type {
    constructor(options) {
        this.name = exports.name;
        // TODO: Remove once TS 2.7 is better supported by editors
        this.allowNaN = undefined;
        this.allowInfinity = undefined;
        this._options = options !== undefined ? options : {};
        if (typeof options !== "function") {
            this._applyOptions();
        }
        else {
            lazy_properties_1.lazyProperties(this, this._applyOptions, ["allowNaN", "allowInfinity"]);
        }
    }
    static fromJSON(options) {
        return new Float64Type(options);
    }
    toJSON() {
        return {
            name: exports.name,
            allowNaN: this.allowNaN,
            allowInfinity: this.allowInfinity,
        };
    }
    readTrustedJson(input) {
        switch (input) {
            case "NaN":
                return NaN;
            case "+Infinity":
                return Infinity;
            case "-Infinity":
                return -Infinity;
            default:
                return input;
        }
    }
    readJson(input) {
        switch (input) {
            case "NaN":
                if (!this.allowNaN) {
                    throw invalid_float64_1.createInvalidFloat64Error(input);
                }
                return NaN;
            case "+Infinity":
                if (!this.allowInfinity) {
                    throw invalid_float64_1.createInvalidFloat64Error(input);
                }
                return Infinity;
            case "-Infinity":
                if (!this.allowInfinity) {
                    throw invalid_float64_1.createInvalidFloat64Error(input);
                }
                return -Infinity;
            default:
                if (typeof input === "number") {
                    return input;
                }
                else {
                    throw invalid_float64_1.createInvalidFloat64Error(input);
                }
        }
    }
    writeJson(val) {
        if (isNaN(val)) {
            return "NaN";
        }
        else if (val === Infinity) {
            return "+Infinity";
        }
        else if (val === -Infinity) {
            return "-Infinity";
        }
        return val;
    }
    testError(val) {
        if (typeof val !== "number") {
            return invalid_type_1.createInvalidTypeError("number", val);
        }
        if (isNaN(val) && !this.allowNaN) {
            return invalid_float64_1.createInvalidFloat64Error(val);
        }
        else if (Math.abs(val) === Infinity && !this.allowInfinity) {
            return invalid_float64_1.createInvalidFloat64Error(val);
        }
        return undefined;
    }
    test(val) {
        return typeof val === "number" && (this.allowNaN || !isNaN(val)) && (this.allowInfinity || Math.abs(val) !== Infinity);
    }
    equals(val1, val2) {
        if (isNaN(val1) || isNaN(val2)) {
            return isNaN(val1) && isNaN(val2);
        }
        return val1 === val2;
    }
    clone(val) {
        return val;
    }
    diff(oldVal, newVal) {
        // We can't use an arithmetic difference due to possible precision loss
        return this.equals(oldVal, newVal) ? undefined : [oldVal, newVal];
    }
    patch(oldVal, diff) {
        return diff === undefined ? oldVal : diff[1];
    }
    reverseDiff(diff) {
        return diff === undefined ? undefined : [diff[1], diff[0]];
    }
    squash(diff1, diff2) {
        if (diff1 === undefined) {
            return diff2 === undefined ? undefined : [diff2[0], diff2[1]];
        }
        else if (diff2 === undefined) {
            return [diff1[0], diff1[1]];
        }
        return this.equals(diff1[0], diff2[1]) ? undefined : [diff1[0], diff2[1]];
    }
    _applyOptions() {
        if (this._options === undefined) {
            throw lazy_options_1.createLazyOptionsError(this);
        }
        const options = typeof this._options === "function" ? this._options() : this._options;
        const allowNaN = options.allowNaN !== undefined ? options.allowNaN : false;
        const allowInfinity = options.allowInfinity !== undefined ? options.allowInfinity : false;
        Object.assign(this, { allowNaN, allowInfinity });
        Object.freeze(this);
    }
}
exports.Float64Type = Float64Type;

//# sourceMappingURL=data:application/json;charset=utf8;base64,

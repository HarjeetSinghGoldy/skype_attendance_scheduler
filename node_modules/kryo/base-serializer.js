"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const incident_1 = require("incident");
class BaseSerializer {
    constructor(format) {
        this.format = format;
        this.types = new Map();
    }
    register(serializer) {
        this.types.set(serializer.typeName, serializer);
    }
    write(type, value) {
        return this.getTypeSerializer(type.name).write(type, value);
    }
    read(type, input) {
        return this.getTypeSerializer(type.name).read(type, input);
    }
    readTrusted(type, input) {
        return this.getTypeSerializer(type.name).readTrusted(type, input);
    }
    getTypeSerializer(name) {
        const result = this.types.get(name);
        if (result === undefined) {
            throw new incident_1.Incident("UnknownType", { name, types: new Map([...this.types.entries()]) });
        }
        return result;
    }
}
exports.BaseSerializer = BaseSerializer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2Utc2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFvQztBQUdwQztJQUlFLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELFFBQVEsQ0FBQyxVQUErQjtRQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxLQUFLLENBQUksSUFBYSxFQUFFLEtBQVE7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsSUFBSSxDQUFJLElBQWEsRUFBRSxLQUFVO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELFdBQVcsQ0FBSSxJQUFhLEVBQUUsS0FBVTtRQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxJQUFjO1FBQ3RDLE1BQU0sTUFBTSxHQUFvQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLElBQUksbUJBQVEsQ0FBQyxhQUFhLEVBQUUsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDdkYsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBaENELHdDQWdDQyIsImZpbGUiOiJiYXNlLXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmNpZGVudCB9IGZyb20gXCJpbmNpZGVudFwiO1xuaW1wb3J0IHsgU2VyaWFsaXplciwgVHlwZSwgVHlwZU5hbWUsIFR5cGVTZXJpYWxpemVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIEJhc2VTZXJpYWxpemVyIGltcGxlbWVudHMgU2VyaWFsaXplciB7XG4gIHJlYWRvbmx5IGZvcm1hdDogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHR5cGVzOiBNYXA8VHlwZU5hbWUsIFR5cGVTZXJpYWxpemVyPGFueT4+O1xuXG4gIGNvbnN0cnVjdG9yKGZvcm1hdDogc3RyaW5nKSB7XG4gICAgdGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgdGhpcy50eXBlcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyKHNlcmlhbGl6ZXI6IFR5cGVTZXJpYWxpemVyPGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLnR5cGVzLnNldChzZXJpYWxpemVyLnR5cGVOYW1lLCBzZXJpYWxpemVyKTtcbiAgfVxuXG4gIHdyaXRlPFQ+KHR5cGU6IFR5cGU8VD4sIHZhbHVlOiBUKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5nZXRUeXBlU2VyaWFsaXplcih0eXBlLm5hbWUpLndyaXRlKHR5cGUsIHZhbHVlKTtcbiAgfVxuXG4gIHJlYWQ8VD4odHlwZTogVHlwZTxUPiwgaW5wdXQ6IGFueSk6IFQge1xuICAgIHJldHVybiB0aGlzLmdldFR5cGVTZXJpYWxpemVyKHR5cGUubmFtZSkucmVhZCh0eXBlLCBpbnB1dCk7XG4gIH1cblxuICByZWFkVHJ1c3RlZDxUPih0eXBlOiBUeXBlPFQ+LCBpbnB1dDogYW55KTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHlwZVNlcmlhbGl6ZXIodHlwZS5uYW1lKS5yZWFkVHJ1c3RlZCh0eXBlLCBpbnB1dCk7XG4gIH1cblxuICBwcml2YXRlIGdldFR5cGVTZXJpYWxpemVyKG5hbWU6IFR5cGVOYW1lKTogVHlwZVNlcmlhbGl6ZXI8YW55PiB7XG4gICAgY29uc3QgcmVzdWx0OiBUeXBlU2VyaWFsaXplcjxhbnk+IHwgdW5kZWZpbmVkID0gdGhpcy50eXBlcy5nZXQobmFtZSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgSW5jaWRlbnQoXCJVbmtub3duVHlwZVwiLCB7bmFtZSwgdHlwZXM6IG5ldyBNYXAoWy4uLnRoaXMudHlwZXMuZW50cmllcygpXSl9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==

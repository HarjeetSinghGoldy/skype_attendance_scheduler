import { createInvalidTypeError } from "../errors/invalid-type";
import { name as typeName } from "../types/map";
export function register(serializer) {
    function write(type, val) {
        const result = {};
        for (const [key, value] of val) {
            const rawKey = type.keyType.writeJson(key);
            const keyString = JSON.stringify(rawKey);
            // TODO(demurgos): Check for duplicate keys
            result[keyString] = serializer.write(type.valueType, value);
        }
        return result;
    }
    function read(type, input) {
        if (typeof input !== "object" || input === null) {
            throw createInvalidTypeError("object", input);
        }
        const result = new Map();
        for (const keyString in input) {
            let rawKey;
            try {
                rawKey = JSON.parse(keyString);
            }
            catch (err) {
                throw err;
            }
            const key = type.keyType.readJson(rawKey);
            const value = serializer.read(type.valueType, input[keyString]);
            result.set(key, value);
        }
        const error = type.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    function readTrusted(type, input) {
        const result = new Map();
        for (const keyString in input) {
            const key = type.keyType.readTrustedJson(JSON.parse(keyString));
            const value = serializer.readTrusted(type.valueType, input[keyString]);
            result.set(key, value);
        }
        return result;
    }
    serializer.register({
        typeName,
        write,
        read,
        readTrusted,
    });
}

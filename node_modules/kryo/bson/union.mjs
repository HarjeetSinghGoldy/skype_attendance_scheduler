import { Incident } from "incident";
import { name as typeName } from "../types/union";
export function register(serializer) {
    function write(type, val) {
        return serializer.write(type.trustedMatcher(val), val);
    }
    function readWithVariant(type, input) {
        const variant = type.readMatcher(input, serializer);
        if (variant === undefined) {
            throw new Incident("UnknownUnionVariant", "Unknown union variant");
        }
        return [serializer.read(variant, input), variant];
    }
    function read(type, input) {
        return readWithVariant(type, input)[0];
    }
    function readTrustedWithVariant(type, input) {
        const variant = type.readTrustedMatcher(input, serializer);
        return [serializer.readTrusted(variant, input), variant];
    }
    function readTrusted(type, input) {
        return readTrustedWithVariant(type, input)[0];
    }
    serializer.register({
        typeName,
        write,
        read,
        readTrusted,
    });
}

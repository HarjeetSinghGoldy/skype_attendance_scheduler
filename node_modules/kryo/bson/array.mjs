import { createInvalidArrayItemsError } from "../errors/invalid-array-items";
import { createInvalidTypeError } from "../errors/invalid-type";
import { createMaxArrayLengthError } from "../errors/max-array-length";
import { name as typeName } from "../types/array";
export function register(serializer) {
    function write(type, val) {
        return val.map((item) => serializer.write(type.itemType, item));
    }
    function read(type, input) {
        if (!Array.isArray(input)) {
            throw createInvalidTypeError("array", input);
        }
        if (type.maxLength !== undefined && input.length > type.maxLength) {
            throw createMaxArrayLengthError(input, type.maxLength);
        }
        let invalid = undefined;
        const result = [];
        const itemCount = input.length;
        for (let i = 0; i < itemCount; i++) {
            try {
                const item = serializer.read(type.itemType, input[i]);
                if (invalid === undefined) {
                    result.push(item);
                }
            }
            catch (err) {
                if (invalid === undefined) {
                    invalid = new Map();
                }
                invalid.set(i, err);
            }
        }
        if (invalid !== undefined) {
            throw createInvalidArrayItemsError(invalid);
        }
        return result;
    }
    function readTrusted(type, input) {
        return input.map((item) => serializer.readTrusted(type.itemType, item));
    }
    serializer.register({
        typeName,
        write,
        read,
        readTrusted,
    });
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_document_1 = require("../errors/invalid-document");
const document_1 = require("../types/document");
function register(serializer) {
    function write(type, val) {
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            const descriptor = type.properties[key];
            const value = val[key];
            if (value === undefined) {
                Reflect.set(result, outKey, undefined);
            }
            else {
                Reflect.set(result, outKey, serializer.write(descriptor.type, value));
            }
        }
        return result;
    }
    function read(type, input) {
        const extra = type.ignoreExtraKeys ? undefined : new Set(Object.keys(input));
        const missing = new Set();
        const invalid = new Map();
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            if (extra !== undefined) {
                extra.delete(outKey);
            }
            const descriptor = type.properties[key];
            const outValue = Reflect.get(input, outKey);
            if (outValue === undefined) {
                if (descriptor.optional) {
                    result[key] = undefined;
                }
                else {
                    missing.add(key);
                }
                continue;
            }
            try {
                result[key] = serializer.read(descriptor.type, outValue);
            }
            catch (err) {
                invalid.set(key, err);
            }
        }
        if (extra !== undefined && extra.size > 0 || missing.size > 0 || invalid.size > 0) {
            throw invalid_document_1.createInvalidDocumentError({ extra, missing, invalid });
        }
        return result;
    }
    function readTrusted(type, input) {
        const result = {}; // Object.create(null);
        for (const [key, outKey] of document_1.renameKeys(type.properties, type.rename)) {
            const descriptor = type.properties[key];
            const outValue = Reflect.get(input, outKey);
            if (outValue === undefined) {
                result[key] = undefined;
            }
            else {
                result[key] = serializer.readTrusted(descriptor.type, outValue);
            }
        }
        return result;
    }
    serializer.register({
        typeName: document_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJzb24vZG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpRUFBd0U7QUFFeEUsZ0RBQW1HO0FBRW5HLGtCQUF5QixVQUFzQjtJQUM3QyxlQUE2QixJQUFxQixFQUFFLEdBQU07UUFDeEQsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDLENBQUMsdUJBQXVCO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUkscUJBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsTUFBTSxVQUFVLEdBQW1DLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEUsTUFBTSxLQUFLLEdBQWUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDekMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN4RSxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELGNBQTRCLElBQXFCLEVBQUUsS0FBVTtRQUMzRCxNQUFNLEtBQUssR0FBNEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdEcsTUFBTSxPQUFPLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkMsTUFBTSxPQUFPLEdBQXdCLElBQUksR0FBRyxFQUFFLENBQUM7UUFFL0MsTUFBTSxNQUFNLEdBQWUsRUFBRSxDQUFDLENBQUMsdUJBQXVCO1FBRXRELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUkscUJBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkIsQ0FBQztZQUNELE1BQU0sVUFBVSxHQUE0QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sUUFBUSxHQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQztnQkFDMUIsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixDQUFDO2dCQUNELFFBQVEsQ0FBQztZQUNYLENBQUM7WUFDRCxJQUFJLENBQUM7Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUMzRCxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN4QixDQUFDO1FBQ0gsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sNkNBQTBCLENBQUMsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELHFCQUFtQyxJQUFxQixFQUFFLEtBQVU7UUFDbEUsTUFBTSxNQUFNLEdBQWUsRUFBRSxDQUFDLENBQUMsdUJBQXVCO1FBQ3RELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUkscUJBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsTUFBTSxVQUFVLEdBQTRCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakUsTUFBTSxRQUFRLEdBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDMUIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsTUFBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ2xCLFFBQVEsRUFBUixlQUFRO1FBQ1IsS0FBSztRQUNMLElBQUk7UUFDSixXQUFXO0tBQ1osQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXJFRCw0QkFxRUMiLCJmaWxlIjoiYnNvbi9kb2N1bWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUludmFsaWREb2N1bWVudEVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9pbnZhbGlkLWRvY3VtZW50XCI7XG5pbXBvcnQgeyBTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBEb2N1bWVudFR5cGUsIG5hbWUgYXMgdHlwZU5hbWUsIFByb3BlcnR5RGVzY3JpcHRvciwgcmVuYW1lS2V5cyB9IGZyb20gXCIuLi90eXBlcy9kb2N1bWVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoc2VyaWFsaXplcjogU2VyaWFsaXplcik6IHZvaWQge1xuICBmdW5jdGlvbiB3cml0ZTxUIGV4dGVuZHMge30+KHR5cGU6IERvY3VtZW50VHlwZTxUPiwgdmFsOiBUKTogYW55IHtcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9OyAvLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgW2tleSwgb3V0S2V5XSBvZiByZW5hbWVLZXlzKHR5cGUucHJvcGVydGllcywgdHlwZS5yZW5hbWUpKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3I8VFtrZXlvZiBUXT4gPSB0eXBlLnByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlOiBUW2tleW9mIFRdID0gdmFsW2tleV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBSZWZsZWN0LnNldChyZXN1bHQsIG91dEtleSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFJlZmxlY3Quc2V0KHJlc3VsdCwgb3V0S2V5LCBzZXJpYWxpemVyLndyaXRlKGRlc2NyaXB0b3IudHlwZSwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCBhcyBUO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZDxUIGV4dGVuZHMge30+KHR5cGU6IERvY3VtZW50VHlwZTxUPiwgaW5wdXQ6IGFueSk6IFQge1xuICAgIGNvbnN0IGV4dHJhOiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZCA9IHR5cGUuaWdub3JlRXh0cmFLZXlzID8gdW5kZWZpbmVkIDogbmV3IFNldChPYmplY3Qua2V5cyhpbnB1dCkpO1xuICAgIGNvbnN0IG1pc3Npbmc6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGludmFsaWQ6IE1hcDxrZXlvZiBULCBFcnJvcj4gPSBuZXcgTWFwKCk7XG5cbiAgICBjb25zdCByZXN1bHQ6IFBhcnRpYWw8VD4gPSB7fTsgLy8gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgb3V0S2V5XSBvZiByZW5hbWVLZXlzKHR5cGUucHJvcGVydGllcywgdHlwZS5yZW5hbWUpKSB7XG4gICAgICBpZiAoZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBleHRyYS5kZWxldGUob3V0S2V5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+ID0gdHlwZS5wcm9wZXJ0aWVzW2tleV07XG4gICAgICBjb25zdCBvdXRWYWx1ZTogYW55ID0gUmVmbGVjdC5nZXQoaW5wdXQsIG91dEtleSk7XG4gICAgICBpZiAob3V0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGVzY3JpcHRvci5vcHRpb25hbCkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pc3NpbmcuYWRkKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHRba2V5XSA9IHNlcmlhbGl6ZXIucmVhZChkZXNjcmlwdG9yLnR5cGUsIG91dFZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpbnZhbGlkLnNldChrZXksIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dHJhICE9PSB1bmRlZmluZWQgJiYgZXh0cmEuc2l6ZSA+IDAgfHwgbWlzc2luZy5zaXplID4gMCB8fCBpbnZhbGlkLnNpemUgPiAwKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkRG9jdW1lbnRFcnJvcih7ZXh0cmEsIG1pc3NpbmcsIGludmFsaWR9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCBhcyBUO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRydXN0ZWQ8VCBleHRlbmRzIHt9Pih0eXBlOiBEb2N1bWVudFR5cGU8VD4sIGlucHV0OiBhbnkpOiBUIHtcbiAgICBjb25zdCByZXN1bHQ6IFBhcnRpYWw8VD4gPSB7fTsgLy8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIG91dEtleV0gb2YgcmVuYW1lS2V5cyh0eXBlLnByb3BlcnRpZXMsIHR5cGUucmVuYW1lKSkge1xuICAgICAgY29uc3QgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yPGFueT4gPSB0eXBlLnByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IG91dFZhbHVlOiBhbnkgPSBSZWZsZWN0LmdldChpbnB1dCwgb3V0S2V5KTtcbiAgICAgIGlmIChvdXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBzZXJpYWxpemVyLnJlYWRUcnVzdGVkKGRlc2NyaXB0b3IudHlwZSwgb3V0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBzZXJpYWxpemVyLnJlZ2lzdGVyKHtcbiAgICB0eXBlTmFtZSxcbiAgICB3cml0ZSxcbiAgICByZWFkLFxuICAgIHJlYWRUcnVzdGVkLFxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==

import { createMissingDependencyError } from "../errors/missing-dependency";
import { name as typeName } from "../types/buffer";
// tslint:disable-next-line:variable-name
let Binary = undefined;
function getBinary() {
    if (Binary === undefined) {
        try {
            // tslint:disable-next-line:no-var-requires no-require-imports
            Binary = require("bson").Binary;
        }
        catch (err) {
            throw createMissingDependencyError("bson", "Required to write buffers to BSON.");
        }
    }
    return Binary;
}
function isBinary(val) {
    return val._bsontype === "Binary";
}
function write(type, val) {
    return new (getBinary())(Buffer.from(val));
}
function read(type, input) {
    let result;
    if (isBinary(input)) {
        // TODO: Fix BSON type definitions
        result = input.value(true);
    }
    else {
        result = input;
    }
    const error = type.testError(result);
    if (error !== undefined) {
        throw error;
    }
    return result;
}
export function readTrusted(type, input) {
    return input.value(true);
}
export const SERIALIZER = {
    typeName,
    write,
    read,
    readTrusted,
};
export function register(serializer) {
    serializer.register(SERIALIZER);
}

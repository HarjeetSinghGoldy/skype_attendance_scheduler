"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_type_1 = require("../errors/invalid-type");
const map_1 = require("../types/map");
function register(serializer) {
    function write(type, val) {
        const result = {};
        for (const [key, value] of val) {
            const rawKey = type.keyType.writeJson(key);
            const keyString = JSON.stringify(rawKey);
            // TODO(demurgos): Check for duplicate keys
            result[keyString] = serializer.write(type.valueType, value);
        }
        return result;
    }
    function read(type, input) {
        if (typeof input !== "object" || input === null) {
            throw invalid_type_1.createInvalidTypeError("object", input);
        }
        const result = new Map();
        for (const keyString in input) {
            let rawKey;
            try {
                rawKey = JSON.parse(keyString);
            }
            catch (err) {
                throw err;
            }
            const key = type.keyType.readJson(rawKey);
            const value = serializer.read(type.valueType, input[keyString]);
            result.set(key, value);
        }
        const error = type.testError(result);
        if (error !== undefined) {
            throw error;
        }
        return result;
    }
    function readTrusted(type, input) {
        const result = new Map();
        for (const keyString in input) {
            const key = type.keyType.readTrustedJson(JSON.parse(keyString));
            const value = serializer.readTrusted(type.valueType, input[keyString]);
            result.set(key, value);
        }
        return result;
    }
    serializer.register({
        typeName: map_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SUFBSTtRQUNKLFdBQVc7S0FDWixDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkRELDRCQW1EQyIsImZpbGUiOiJic29uL21hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL2ludmFsaWQtdHlwZVwiO1xuaW1wb3J0IHsgU2VyaWFsaXplciB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHsgTWFwVHlwZSwgbmFtZSBhcyB0eXBlTmFtZSB9IGZyb20gXCIuLi90eXBlcy9tYXBcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIpOiB2b2lkIHtcbiAgZnVuY3Rpb24gd3JpdGU8SywgVj4odHlwZTogTWFwVHlwZTxLLCBWPiwgdmFsOiBNYXA8SywgVj4pOiB7W2tleTogc3RyaW5nXTogYW55fSB7XG4gICAgY29uc3QgcmVzdWx0OiB7W2tleTogc3RyaW5nXTogYW55fSA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHZhbCkge1xuICAgICAgY29uc3QgcmF3S2V5OiBhbnkgPSB0eXBlLmtleVR5cGUud3JpdGVKc29uKGtleSk7XG4gICAgICBjb25zdCBrZXlTdHJpbmc6IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHJhd0tleSk7XG4gICAgICAvLyBUT0RPKGRlbXVyZ29zKTogQ2hlY2sgZm9yIGR1cGxpY2F0ZSBrZXlzXG4gICAgICByZXN1bHRba2V5U3RyaW5nXSA9IHNlcmlhbGl6ZXIud3JpdGUodHlwZS52YWx1ZVR5cGUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQ8SywgVj4odHlwZTogTWFwVHlwZTxLLCBWPiwgaW5wdXQ6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogTWFwPEssIFY+IHtcbiAgICBpZiAodHlwZW9mIGlucHV0ICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkVHlwZUVycm9yKFwib2JqZWN0XCIsIGlucHV0KTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0OiBNYXA8SywgVj4gPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBrZXlTdHJpbmcgaW4gaW5wdXQpIHtcbiAgICAgIGxldCByYXdLZXk6IGFueTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJhd0tleSA9IEpTT04ucGFyc2Uoa2V5U3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXk6IEsgPSB0eXBlLmtleVR5cGUucmVhZEpzb24ocmF3S2V5KTtcbiAgICAgIGNvbnN0IHZhbHVlOiBWID0gc2VyaWFsaXplci5yZWFkKHR5cGUudmFsdWVUeXBlLCBpbnB1dFtrZXlTdHJpbmddKTtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IHR5cGUudGVzdEVycm9yKHJlc3VsdCk7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRydXN0ZWQ8SywgVj4odHlwZTogTWFwVHlwZTxLLCBWPiwgaW5wdXQ6IHtba2V5OiBzdHJpbmddOiBhbnl9KTogTWFwPEssIFY+IHtcbiAgICBjb25zdCByZXN1bHQ6IE1hcDxLLCBWPiA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IGtleVN0cmluZyBpbiBpbnB1dCkge1xuICAgICAgY29uc3Qga2V5OiBLID0gdHlwZS5rZXlUeXBlLnJlYWRUcnVzdGVkSnNvbihKU09OLnBhcnNlKGtleVN0cmluZykpO1xuICAgICAgY29uc3QgdmFsdWU6IFYgPSBzZXJpYWxpemVyLnJlYWRUcnVzdGVkKHR5cGUudmFsdWVUeXBlLCBpbnB1dFtrZXlTdHJpbmddKTtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzZXJpYWxpemVyLnJlZ2lzdGVyKHtcbiAgICB0eXBlTmFtZSxcbiAgICB3cml0ZSxcbiAgICByZWFkLFxuICAgIHJlYWRUcnVzdGVkLFxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==

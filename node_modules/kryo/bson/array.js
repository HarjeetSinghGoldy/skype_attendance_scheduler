"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_array_items_1 = require("../errors/invalid-array-items");
const invalid_type_1 = require("../errors/invalid-type");
const max_array_length_1 = require("../errors/max-array-length");
const array_1 = require("../types/array");
function register(serializer) {
    function write(type, val) {
        return val.map((item) => serializer.write(type.itemType, item));
    }
    function read(type, input) {
        if (!Array.isArray(input)) {
            throw invalid_type_1.createInvalidTypeError("array", input);
        }
        if (type.maxLength !== undefined && input.length > type.maxLength) {
            throw max_array_length_1.createMaxArrayLengthError(input, type.maxLength);
        }
        let invalid = undefined;
        const result = [];
        const itemCount = input.length;
        for (let i = 0; i < itemCount; i++) {
            try {
                const item = serializer.read(type.itemType, input[i]);
                if (invalid === undefined) {
                    result.push(item);
                }
            }
            catch (err) {
                if (invalid === undefined) {
                    invalid = new Map();
                }
                invalid.set(i, err);
            }
        }
        if (invalid !== undefined) {
            throw invalid_array_items_1.createInvalidArrayItemsError(invalid);
        }
        return result;
    }
    function readTrusted(type, input) {
        return input.map((item) => serializer.readTrusted(type.itemType, item));
    }
    serializer.register({
        typeName: array_1.name,
        write,
        read,
        readTrusted,
    });
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJzb24vYXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1RUFBNkU7QUFDN0UseURBQWdFO0FBQ2hFLGlFQUF1RTtBQUV2RSwwQ0FBNkQ7QUFFN0Qsa0JBQXlCLFVBQXNCO0lBQzdDLGVBQWtCLElBQWtCLEVBQUUsR0FBUTtRQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQU8sRUFBTyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGNBQWlCLElBQWtCLEVBQUUsS0FBWTtRQUMvQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0scUNBQXNCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sNENBQXlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsSUFBSSxPQUFPLEdBQW1DLFNBQVMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsTUFBTSxTQUFTLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQztnQkFDSCxNQUFNLElBQUksR0FBTSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQixDQUFDO1lBQ0gsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQzFCLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixDQUFDO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7UUFDSCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxrREFBNEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQscUJBQXdCLElBQWtCLEVBQUUsS0FBWTtRQUN0RCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQVMsRUFBSyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDbEIsUUFBUSxFQUFSLFlBQVE7UUFDUixLQUFLO1FBQ0wsSUFBSTtRQUNKLFdBQVc7S0FDWixDQUFDLENBQUM7QUFDTCxDQUFDO0FBNUNELDRCQTRDQyIsImZpbGUiOiJic29uL2FycmF5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW52YWxpZEFycmF5SXRlbXNFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC1hcnJheS1pdGVtc1wiO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZFR5cGVFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMvaW52YWxpZC10eXBlXCI7XG5pbXBvcnQgeyBjcmVhdGVNYXhBcnJheUxlbmd0aEVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy9tYXgtYXJyYXktbGVuZ3RoXCI7XG5pbXBvcnQgeyBTZXJpYWxpemVyIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBBcnJheVR5cGUsIG5hbWUgYXMgdHlwZU5hbWUgfSBmcm9tIFwiLi4vdHlwZXMvYXJyYXlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyKHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXIpOiB2b2lkIHtcbiAgZnVuY3Rpb24gd3JpdGU8VD4odHlwZTogQXJyYXlUeXBlPFQ+LCB2YWw6IFRbXSk6IGFueVtdIHtcbiAgICByZXR1cm4gdmFsLm1hcCgoaXRlbTogVCk6IGFueSA9PiBzZXJpYWxpemVyLndyaXRlKHR5cGUuaXRlbVR5cGUsIGl0ZW0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQ8VD4odHlwZTogQXJyYXlUeXBlPFQ+LCBpbnB1dDogYW55W10pOiBUW10ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHRocm93IGNyZWF0ZUludmFsaWRUeXBlRXJyb3IoXCJhcnJheVwiLCBpbnB1dCk7XG4gICAgfVxuICAgIGlmICh0eXBlLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkICYmIGlucHV0Lmxlbmd0aCA+IHR5cGUubWF4TGVuZ3RoKSB7XG4gICAgICB0aHJvdyBjcmVhdGVNYXhBcnJheUxlbmd0aEVycm9yKGlucHV0LCB0eXBlLm1heExlbmd0aCk7XG4gICAgfVxuICAgIGxldCBpbnZhbGlkOiB1bmRlZmluZWQgfCBNYXA8bnVtYmVyLCBFcnJvcj4gPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgcmVzdWx0OiBUW10gPSBbXTtcbiAgICBjb25zdCBpdGVtQ291bnQ6IG51bWJlciA9IGlucHV0Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgaXRlbUNvdW50OyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGl0ZW06IFQgPSBzZXJpYWxpemVyLnJlYWQodHlwZS5pdGVtVHlwZSwgaW5wdXRbaV0pO1xuICAgICAgICBpZiAoaW52YWxpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoaW52YWxpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW52YWxpZCA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpbnZhbGlkLnNldChpLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW52YWxpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBjcmVhdGVJbnZhbGlkQXJyYXlJdGVtc0Vycm9yKGludmFsaWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFRydXN0ZWQ8VD4odHlwZTogQXJyYXlUeXBlPFQ+LCBpbnB1dDogYW55W10pOiBUW10ge1xuICAgIHJldHVybiBpbnB1dC5tYXAoKGl0ZW06IGFueSk6IFQgPT4gc2VyaWFsaXplci5yZWFkVHJ1c3RlZCh0eXBlLml0ZW1UeXBlLCBpdGVtKSk7XG4gIH1cblxuICBzZXJpYWxpemVyLnJlZ2lzdGVyKHtcbiAgICB0eXBlTmFtZSxcbiAgICB3cml0ZSxcbiAgICByZWFkLFxuICAgIHJlYWRUcnVzdGVkLFxuICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==

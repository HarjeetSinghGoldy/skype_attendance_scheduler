"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_serializer_1 = require("../base-serializer");
const array_1 = require("./array");
const boolean_1 = require("./boolean");
const buffer_1 = require("./buffer");
const codepoint_string_1 = require("./codepoint-string");
const custom_1 = require("./custom");
const date_1 = require("./date");
const document_1 = require("./document");
const float64_1 = require("./float64");
const integer_1 = require("./integer");
const json_1 = require("./json");
const literal_1 = require("./literal");
const map_1 = require("./map");
const null_1 = require("./null");
const simple_enum_1 = require("./simple-enum");
const ucs2_string_1 = require("./ucs2-string");
const union_1 = require("./union");
const white_list_1 = require("./white-list");
function createBsonSerializer() {
    const serializer = new base_serializer_1.BaseSerializer("bson");
    array_1.register(serializer);
    boolean_1.register(serializer);
    buffer_1.register(serializer);
    codepoint_string_1.register(serializer);
    custom_1.register(serializer);
    date_1.register(serializer);
    document_1.register(serializer);
    float64_1.register(serializer);
    integer_1.register(serializer);
    json_1.register(serializer);
    literal_1.register(serializer);
    map_1.register(serializer);
    null_1.register(serializer);
    simple_enum_1.register(serializer);
    ucs2_string_1.register(serializer);
    union_1.register(serializer);
    white_list_1.register(serializer);
    return serializer;
}
exports.createBsonSerializer = createBsonSerializer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJzb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3REFBb0Q7QUFDcEQsbUNBQW9EO0FBQ3BELHVDQUF3RDtBQUN4RCxxQ0FBc0Q7QUFDdEQseURBQXlFO0FBQ3pFLHFDQUFzRDtBQUN0RCxpQ0FBa0Q7QUFDbEQseUNBQTBEO0FBQzFELHVDQUF3RDtBQUN4RCx1Q0FBd0Q7QUFDeEQsaUNBQWtEO0FBQ2xELHVDQUF3RDtBQUN4RCwrQkFBZ0Q7QUFDaEQsaUNBQWtEO0FBQ2xELCtDQUErRDtBQUMvRCwrQ0FBK0Q7QUFDL0QsbUNBQW9EO0FBQ3BELDZDQUE2RDtBQUU3RDtJQUNFLE1BQU0sVUFBVSxHQUFtQixJQUFJLGdDQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUQsZ0JBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixrQkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLGlCQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsMkJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEMsaUJBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMzQixlQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekIsbUJBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0Isa0JBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QixrQkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLGVBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6QixrQkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLGNBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4QixlQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekIsc0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0Isc0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0IsZ0JBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQixxQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QixNQUFNLENBQUMsVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFwQkQsb0RBb0JDIiwiZmlsZSI6ImJzb24vaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlU2VyaWFsaXplciB9IGZyb20gXCIuLi9iYXNlLXNlcmlhbGl6ZXJcIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyQXJyYXkgfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJCb29sZWFuIH0gZnJvbSBcIi4vYm9vbGVhblwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJCdWZmZXIgfSBmcm9tIFwiLi9idWZmZXJcIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyQ29kZXBvaW50U3RyaW5nIH0gZnJvbSBcIi4vY29kZXBvaW50LXN0cmluZ1wiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJDdXN0b20gfSBmcm9tIFwiLi9jdXN0b21cIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyRGF0ZSB9IGZyb20gXCIuL2RhdGVcIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyRG9jdW1lbnQgfSBmcm9tIFwiLi9kb2N1bWVudFwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJGbG9hdDY0IH0gZnJvbSBcIi4vZmxvYXQ2NFwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJJbnRlZ2VyIH0gZnJvbSBcIi4vaW50ZWdlclwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJKc29uIH0gZnJvbSBcIi4vanNvblwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJMaXRlcmFsIH0gZnJvbSBcIi4vbGl0ZXJhbFwiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJNYXAgfSBmcm9tIFwiLi9tYXBcIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyTnVsbCB9IGZyb20gXCIuL251bGxcIjtcbmltcG9ydCB7IHJlZ2lzdGVyIGFzIHJlZ2lzdGVyU2ltcGxlRW51bSB9IGZyb20gXCIuL3NpbXBsZS1lbnVtXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlclVjczJTdHJpbmcgfSBmcm9tIFwiLi91Y3MyLXN0cmluZ1wiO1xuaW1wb3J0IHsgcmVnaXN0ZXIgYXMgcmVnaXN0ZXJVbmlvbiB9IGZyb20gXCIuL3VuaW9uXCI7XG5pbXBvcnQgeyByZWdpc3RlciBhcyByZWdpc3RlcldoaXRlTGlzdCB9IGZyb20gXCIuL3doaXRlLWxpc3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJzb25TZXJpYWxpemVyKCk6IEJhc2VTZXJpYWxpemVyIHtcbiAgY29uc3Qgc2VyaWFsaXplcjogQmFzZVNlcmlhbGl6ZXIgPSBuZXcgQmFzZVNlcmlhbGl6ZXIoXCJic29uXCIpO1xuICByZWdpc3RlckFycmF5KHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlckJvb2xlYW4oc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyQnVmZmVyKHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlckNvZGVwb2ludFN0cmluZyhzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJDdXN0b20oc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyRGF0ZShzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJEb2N1bWVudChzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJGbG9hdDY0KHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlckludGVnZXIoc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVySnNvbihzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJMaXRlcmFsKHNlcmlhbGl6ZXIpO1xuICByZWdpc3Rlck1hcChzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJOdWxsKHNlcmlhbGl6ZXIpO1xuICByZWdpc3RlclNpbXBsZUVudW0oc2VyaWFsaXplcik7XG4gIHJlZ2lzdGVyVWNzMlN0cmluZyhzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJVbmlvbihzZXJpYWxpemVyKTtcbiAgcmVnaXN0ZXJXaGl0ZUxpc3Qoc2VyaWFsaXplcik7XG4gIHJldHVybiBzZXJpYWxpemVyO1xufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9

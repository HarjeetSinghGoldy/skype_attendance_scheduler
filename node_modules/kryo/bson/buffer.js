"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const missing_dependency_1 = require("../errors/missing-dependency");
const buffer_1 = require("../types/buffer");
// tslint:disable-next-line:variable-name
let Binary = undefined;
function getBinary() {
    if (Binary === undefined) {
        try {
            // tslint:disable-next-line:no-var-requires no-require-imports
            Binary = require("bson").Binary;
        }
        catch (err) {
            throw missing_dependency_1.createMissingDependencyError("bson", "Required to write buffers to BSON.");
        }
    }
    return Binary;
}
function isBinary(val) {
    return val._bsontype === "Binary";
}
function write(type, val) {
    return new (getBinary())(Buffer.from(val));
}
function read(type, input) {
    let result;
    if (isBinary(input)) {
        // TODO: Fix BSON type definitions
        result = input.value(true);
    }
    else {
        result = input;
    }
    const error = type.testError(result);
    if (error !== undefined) {
        throw error;
    }
    return result;
}
function readTrusted(type, input) {
    return input.value(true);
}
exports.readTrusted = readTrusted;
exports.SERIALIZER = {
    typeName: buffer_1.name,
    write,
    read,
    readTrusted,
};
function register(serializer) {
    serializer.register(exports.SERIALIZER);
}
exports.register = register;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJzb24vYnVmZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUVBQTRFO0FBRTVFLDRDQUErRDtBQU8vRCx5Q0FBeUM7QUFDekMsSUFBSSxNQUFNLEdBQWtDLFNBQVMsQ0FBQztBQUV0RDtJQUNFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQztZQUNILDhEQUE4RDtZQUM5RCxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0saURBQTRCLENBQUMsTUFBTSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7UUFDbkYsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsTUFBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxrQkFBa0IsR0FBUTtJQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRLENBQUM7QUFDcEMsQ0FBQztBQUVELGVBQWUsSUFBZ0IsRUFBRSxHQUFlO0lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQVUsQ0FBQyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELGNBQWMsSUFBZ0IsRUFBRSxLQUF1QztJQUNyRSxJQUFJLE1BQWtCLENBQUM7SUFDdkIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixrQ0FBa0M7UUFDbEMsTUFBTSxHQUFVLEtBQXNDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNELE1BQU0sS0FBSyxHQUFzQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELHFCQUE0QixJQUFnQixFQUFFLEtBQWlCO0lBQzdELE1BQU0sQ0FBUSxLQUFzQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRkQsa0NBRUM7QUFFWSxRQUFBLFVBQVUsR0FBd0I7SUFDN0MsUUFBUSxFQUFSLGFBQVE7SUFDUixLQUFLO0lBQ0wsSUFBSTtJQUNKLFdBQVc7Q0FDWixDQUFDO0FBRUYsa0JBQXlCLFVBQXNCO0lBQzdDLFVBQVUsQ0FBQyxRQUFRLENBQUMsa0JBQVUsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCw0QkFFQyIsImZpbGUiOiJic29uL2J1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbmFyeSBhcyBCaW5hcnlUeXBlIH0gZnJvbSBcImJzb25cIjtcbmltcG9ydCB7IGNyZWF0ZU1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzL21pc3NpbmctZGVwZW5kZW5jeVwiO1xuaW1wb3J0IHsgU2VyaWFsaXplciwgVHlwZVNlcmlhbGl6ZXIgfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7IEJ1ZmZlclR5cGUsIG5hbWUgYXMgdHlwZU5hbWUgfSBmcm9tIFwiLi4vdHlwZXMvYnVmZmVyXCI7XG5cbi8vIFRPRE86IEZpeCBCU09OIHR5cGUgZGVmaW5pdGlvbnNcbmludGVyZmFjZSBCaW5hcnlDb25zdHJ1Y3RvciB7XG4gIG5ldyhidWZmZXI6IFVpbnQ4QXJyYXkpOiBCaW5hcnlUeXBlO1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxubGV0IEJpbmFyeTogQmluYXJ5Q29uc3RydWN0b3IgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGdldEJpbmFyeSgpOiBCaW5hcnlDb25zdHJ1Y3RvciB7XG4gIGlmIChCaW5hcnkgPT09IHVuZGVmaW5lZCkge1xuICAgIHRyeSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdmFyLXJlcXVpcmVzIG5vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgQmluYXJ5ID0gcmVxdWlyZShcImJzb25cIikuQmluYXJ5O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgY3JlYXRlTWlzc2luZ0RlcGVuZGVuY3lFcnJvcihcImJzb25cIiwgXCJSZXF1aXJlZCB0byB3cml0ZSBidWZmZXJzIHRvIEJTT04uXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQmluYXJ5ITtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkodmFsOiBhbnkpOiB2YWwgaXMgQmluYXJ5VHlwZSB7XG4gIHJldHVybiB2YWwuX2Jzb250eXBlID09PSBcIkJpbmFyeVwiO1xufVxuXG5mdW5jdGlvbiB3cml0ZSh0eXBlOiBCdWZmZXJUeXBlLCB2YWw6IFVpbnQ4QXJyYXkpOiBCaW5hcnlUeXBlIHtcbiAgcmV0dXJuIG5ldyAoZ2V0QmluYXJ5KCkpKEJ1ZmZlci5mcm9tKHZhbCBhcyBhbnkpKTtcbn1cblxuZnVuY3Rpb24gcmVhZCh0eXBlOiBCdWZmZXJUeXBlLCBpbnB1dDogQmluYXJ5VHlwZSB8IEJ1ZmZlciB8IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgbGV0IHJlc3VsdDogVWludDhBcnJheTtcbiAgaWYgKGlzQmluYXJ5KGlucHV0KSkge1xuICAgIC8vIFRPRE86IEZpeCBCU09OIHR5cGUgZGVmaW5pdGlvbnNcbiAgICByZXN1bHQgPSAoPGFueT4gaW5wdXQgYXMge3ZhbHVlKGFzUmF3OiB0cnVlKTogQnVmZmVyfSkudmFsdWUodHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gaW5wdXQ7XG4gIH1cbiAgY29uc3QgZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkID0gdHlwZS50ZXN0RXJyb3IocmVzdWx0KTtcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFRydXN0ZWQodHlwZTogQnVmZmVyVHlwZSwgaW5wdXQ6IEJpbmFyeVR5cGUpOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuICg8YW55PiBpbnB1dCBhcyB7dmFsdWUoYXNSYXc6IHRydWUpOiBCdWZmZXJ9KS52YWx1ZSh0cnVlKTtcbn1cblxuZXhwb3J0IGNvbnN0IFNFUklBTElaRVI6IFR5cGVTZXJpYWxpemVyPGFueT4gPSB7XG4gIHR5cGVOYW1lLFxuICB3cml0ZSxcbiAgcmVhZCxcbiAgcmVhZFRydXN0ZWQsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoc2VyaWFsaXplcjogU2VyaWFsaXplcik6IHZvaWQge1xuICBzZXJpYWxpemVyLnJlZ2lzdGVyKFNFUklBTElaRVIpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9
